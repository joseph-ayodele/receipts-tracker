// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/category"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ReceiptUpdate is the builder for updating Receipt entities.
type ReceiptUpdate struct {
	config
	hooks    []Hook
	mutation *ReceiptMutation
}

// Where appends a list predicates to the ReceiptUpdate builder.
func (_u *ReceiptUpdate) Where(ps ...predicate.Receipt) *ReceiptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetProfileID sets the "profile_id" field.
func (_u *ReceiptUpdate) SetProfileID(v uuid.UUID) *ReceiptUpdate {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableProfileID(v *uuid.UUID) *ReceiptUpdate {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetMerchantName sets the "merchant_name" field.
func (_u *ReceiptUpdate) SetMerchantName(v string) *ReceiptUpdate {
	_u.mutation.SetMerchantName(v)
	return _u
}

// SetNillableMerchantName sets the "merchant_name" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableMerchantName(v *string) *ReceiptUpdate {
	if v != nil {
		_u.SetMerchantName(*v)
	}
	return _u
}

// SetSubtotal sets the "subtotal" field.
func (_u *ReceiptUpdate) SetSubtotal(v float64) *ReceiptUpdate {
	_u.mutation.ResetSubtotal()
	_u.mutation.SetSubtotal(v)
	return _u
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableSubtotal(v *float64) *ReceiptUpdate {
	if v != nil {
		_u.SetSubtotal(*v)
	}
	return _u
}

// AddSubtotal adds value to the "subtotal" field.
func (_u *ReceiptUpdate) AddSubtotal(v float64) *ReceiptUpdate {
	_u.mutation.AddSubtotal(v)
	return _u
}

// ClearSubtotal clears the value of the "subtotal" field.
func (_u *ReceiptUpdate) ClearSubtotal() *ReceiptUpdate {
	_u.mutation.ClearSubtotal()
	return _u
}

// SetTax sets the "tax" field.
func (_u *ReceiptUpdate) SetTax(v float64) *ReceiptUpdate {
	_u.mutation.ResetTax()
	_u.mutation.SetTax(v)
	return _u
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableTax(v *float64) *ReceiptUpdate {
	if v != nil {
		_u.SetTax(*v)
	}
	return _u
}

// AddTax adds value to the "tax" field.
func (_u *ReceiptUpdate) AddTax(v float64) *ReceiptUpdate {
	_u.mutation.AddTax(v)
	return _u
}

// ClearTax clears the value of the "tax" field.
func (_u *ReceiptUpdate) ClearTax() *ReceiptUpdate {
	_u.mutation.ClearTax()
	return _u
}

// SetTotal sets the "total" field.
func (_u *ReceiptUpdate) SetTotal(v float64) *ReceiptUpdate {
	_u.mutation.ResetTotal()
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableTotal(v *float64) *ReceiptUpdate {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// AddTotal adds value to the "total" field.
func (_u *ReceiptUpdate) AddTotal(v float64) *ReceiptUpdate {
	_u.mutation.AddTotal(v)
	return _u
}

// SetCurrencyCode sets the "currency_code" field.
func (_u *ReceiptUpdate) SetCurrencyCode(v string) *ReceiptUpdate {
	_u.mutation.SetCurrencyCode(v)
	return _u
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableCurrencyCode(v *string) *ReceiptUpdate {
	if v != nil {
		_u.SetCurrencyCode(*v)
	}
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ReceiptUpdate) SetCategoryID(v int) *ReceiptUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableCategoryID(v *int) *ReceiptUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// SetPaymentMethod sets the "payment_method" field.
func (_u *ReceiptUpdate) SetPaymentMethod(v string) *ReceiptUpdate {
	_u.mutation.SetPaymentMethod(v)
	return _u
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillablePaymentMethod(v *string) *ReceiptUpdate {
	if v != nil {
		_u.SetPaymentMethod(*v)
	}
	return _u
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (_u *ReceiptUpdate) ClearPaymentMethod() *ReceiptUpdate {
	_u.mutation.ClearPaymentMethod()
	return _u
}

// SetPaymentLast4 sets the "payment_last4" field.
func (_u *ReceiptUpdate) SetPaymentLast4(v string) *ReceiptUpdate {
	_u.mutation.SetPaymentLast4(v)
	return _u
}

// SetNillablePaymentLast4 sets the "payment_last4" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillablePaymentLast4(v *string) *ReceiptUpdate {
	if v != nil {
		_u.SetPaymentLast4(*v)
	}
	return _u
}

// ClearPaymentLast4 clears the value of the "payment_last4" field.
func (_u *ReceiptUpdate) ClearPaymentLast4() *ReceiptUpdate {
	_u.mutation.ClearPaymentLast4()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ReceiptUpdate) SetDescription(v string) *ReceiptUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableDescription(v *string) *ReceiptUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ReceiptUpdate) SetCreatedAt(v time.Time) *ReceiptUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ReceiptUpdate) SetNillableCreatedAt(v *time.Time) *ReceiptUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ReceiptUpdate) SetUpdatedAt(v time.Time) *ReceiptUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ReceiptUpdate) SetProfile(v *Profile) *ReceiptUpdate {
	return _u.SetProfileID(v.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *ReceiptUpdate) SetCategory(v *Category) *ReceiptUpdate {
	return _u.SetCategoryID(v.ID)
}

// AddFileIDs adds the "files" edge to the ReceiptFile entity by IDs.
func (_u *ReceiptUpdate) AddFileIDs(ids ...uuid.UUID) *ReceiptUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the ReceiptFile entity.
func (_u *ReceiptUpdate) AddFiles(v ...*ReceiptFile) *ReceiptUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_u *ReceiptUpdate) AddJobIDs(ids ...uuid.UUID) *ReceiptUpdate {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_u *ReceiptUpdate) AddJobs(v ...*ExtractJob) *ReceiptUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the ReceiptMutation object of the builder.
func (_u *ReceiptUpdate) Mutation() *ReceiptMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ReceiptUpdate) ClearProfile() *ReceiptUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *ReceiptUpdate) ClearCategory() *ReceiptUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// ClearFiles clears all "files" edges to the ReceiptFile entity.
func (_u *ReceiptUpdate) ClearFiles() *ReceiptUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to ReceiptFile entities by IDs.
func (_u *ReceiptUpdate) RemoveFileIDs(ids ...uuid.UUID) *ReceiptUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to ReceiptFile entities.
func (_u *ReceiptUpdate) RemoveFiles(v ...*ReceiptFile) *ReceiptUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the ExtractJob entity.
func (_u *ReceiptUpdate) ClearJobs() *ReceiptUpdate {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to ExtractJob entities by IDs.
func (_u *ReceiptUpdate) RemoveJobIDs(ids ...uuid.UUID) *ReceiptUpdate {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to ExtractJob entities.
func (_u *ReceiptUpdate) RemoveJobs(v ...*ExtractJob) *ReceiptUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ReceiptUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReceiptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ReceiptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReceiptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ReceiptUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := receipt.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReceiptUpdate) check() error {
	if v, ok := _u.mutation.MerchantName(); ok {
		if err := receipt.MerchantNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_name", err: fmt.Errorf(`ent: validator failed for field "Receipt.merchant_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrencyCode(); ok {
		if err := receipt.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Receipt.currency_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentLast4(); ok {
		if err := receipt.PaymentLast4Validator(v); err != nil {
			return &ValidationError{Name: "payment_last4", err: fmt.Errorf(`ent: validator failed for field "Receipt.payment_last4": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Receipt.profile"`)
	}
	if _u.mutation.CategoryCleared() && len(_u.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Receipt.category"`)
	}
	return nil
}

func (_u *ReceiptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receipt.Table, receipt.Columns, sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MerchantName(); ok {
		_spec.SetField(receipt.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subtotal(); ok {
		_spec.SetField(receipt.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubtotal(); ok {
		_spec.AddField(receipt.FieldSubtotal, field.TypeFloat64, value)
	}
	if _u.mutation.SubtotalCleared() {
		_spec.ClearField(receipt.FieldSubtotal, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Tax(); ok {
		_spec.SetField(receipt.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTax(); ok {
		_spec.AddField(receipt.FieldTax, field.TypeFloat64, value)
	}
	if _u.mutation.TaxCleared() {
		_spec.ClearField(receipt.FieldTax, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(receipt.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotal(); ok {
		_spec.AddField(receipt.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CurrencyCode(); ok {
		_spec.SetField(receipt.FieldCurrencyCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.PaymentMethod(); ok {
		_spec.SetField(receipt.FieldPaymentMethod, field.TypeString, value)
	}
	if _u.mutation.PaymentMethodCleared() {
		_spec.ClearField(receipt.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentLast4(); ok {
		_spec.SetField(receipt.FieldPaymentLast4, field.TypeString, value)
	}
	if _u.mutation.PaymentLast4Cleared() {
		_spec.ClearField(receipt.FieldPaymentLast4, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(receipt.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(receipt.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(receipt.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.ProfileTable,
			Columns: []string{receipt.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.ProfileTable,
			Columns: []string{receipt.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.CategoryTable,
			Columns: []string{receipt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.CategoryTable,
			Columns: []string{receipt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ReceiptUpdateOne is the builder for updating a single Receipt entity.
type ReceiptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceiptMutation
}

// SetProfileID sets the "profile_id" field.
func (_u *ReceiptUpdateOne) SetProfileID(v uuid.UUID) *ReceiptUpdateOne {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableProfileID(v *uuid.UUID) *ReceiptUpdateOne {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetMerchantName sets the "merchant_name" field.
func (_u *ReceiptUpdateOne) SetMerchantName(v string) *ReceiptUpdateOne {
	_u.mutation.SetMerchantName(v)
	return _u
}

// SetNillableMerchantName sets the "merchant_name" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableMerchantName(v *string) *ReceiptUpdateOne {
	if v != nil {
		_u.SetMerchantName(*v)
	}
	return _u
}

// SetSubtotal sets the "subtotal" field.
func (_u *ReceiptUpdateOne) SetSubtotal(v float64) *ReceiptUpdateOne {
	_u.mutation.ResetSubtotal()
	_u.mutation.SetSubtotal(v)
	return _u
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableSubtotal(v *float64) *ReceiptUpdateOne {
	if v != nil {
		_u.SetSubtotal(*v)
	}
	return _u
}

// AddSubtotal adds value to the "subtotal" field.
func (_u *ReceiptUpdateOne) AddSubtotal(v float64) *ReceiptUpdateOne {
	_u.mutation.AddSubtotal(v)
	return _u
}

// ClearSubtotal clears the value of the "subtotal" field.
func (_u *ReceiptUpdateOne) ClearSubtotal() *ReceiptUpdateOne {
	_u.mutation.ClearSubtotal()
	return _u
}

// SetTax sets the "tax" field.
func (_u *ReceiptUpdateOne) SetTax(v float64) *ReceiptUpdateOne {
	_u.mutation.ResetTax()
	_u.mutation.SetTax(v)
	return _u
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableTax(v *float64) *ReceiptUpdateOne {
	if v != nil {
		_u.SetTax(*v)
	}
	return _u
}

// AddTax adds value to the "tax" field.
func (_u *ReceiptUpdateOne) AddTax(v float64) *ReceiptUpdateOne {
	_u.mutation.AddTax(v)
	return _u
}

// ClearTax clears the value of the "tax" field.
func (_u *ReceiptUpdateOne) ClearTax() *ReceiptUpdateOne {
	_u.mutation.ClearTax()
	return _u
}

// SetTotal sets the "total" field.
func (_u *ReceiptUpdateOne) SetTotal(v float64) *ReceiptUpdateOne {
	_u.mutation.ResetTotal()
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableTotal(v *float64) *ReceiptUpdateOne {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// AddTotal adds value to the "total" field.
func (_u *ReceiptUpdateOne) AddTotal(v float64) *ReceiptUpdateOne {
	_u.mutation.AddTotal(v)
	return _u
}

// SetCurrencyCode sets the "currency_code" field.
func (_u *ReceiptUpdateOne) SetCurrencyCode(v string) *ReceiptUpdateOne {
	_u.mutation.SetCurrencyCode(v)
	return _u
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableCurrencyCode(v *string) *ReceiptUpdateOne {
	if v != nil {
		_u.SetCurrencyCode(*v)
	}
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ReceiptUpdateOne) SetCategoryID(v int) *ReceiptUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableCategoryID(v *int) *ReceiptUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// SetPaymentMethod sets the "payment_method" field.
func (_u *ReceiptUpdateOne) SetPaymentMethod(v string) *ReceiptUpdateOne {
	_u.mutation.SetPaymentMethod(v)
	return _u
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillablePaymentMethod(v *string) *ReceiptUpdateOne {
	if v != nil {
		_u.SetPaymentMethod(*v)
	}
	return _u
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (_u *ReceiptUpdateOne) ClearPaymentMethod() *ReceiptUpdateOne {
	_u.mutation.ClearPaymentMethod()
	return _u
}

// SetPaymentLast4 sets the "payment_last4" field.
func (_u *ReceiptUpdateOne) SetPaymentLast4(v string) *ReceiptUpdateOne {
	_u.mutation.SetPaymentLast4(v)
	return _u
}

// SetNillablePaymentLast4 sets the "payment_last4" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillablePaymentLast4(v *string) *ReceiptUpdateOne {
	if v != nil {
		_u.SetPaymentLast4(*v)
	}
	return _u
}

// ClearPaymentLast4 clears the value of the "payment_last4" field.
func (_u *ReceiptUpdateOne) ClearPaymentLast4() *ReceiptUpdateOne {
	_u.mutation.ClearPaymentLast4()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ReceiptUpdateOne) SetDescription(v string) *ReceiptUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableDescription(v *string) *ReceiptUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ReceiptUpdateOne) SetCreatedAt(v time.Time) *ReceiptUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ReceiptUpdateOne) SetNillableCreatedAt(v *time.Time) *ReceiptUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ReceiptUpdateOne) SetUpdatedAt(v time.Time) *ReceiptUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ReceiptUpdateOne) SetProfile(v *Profile) *ReceiptUpdateOne {
	return _u.SetProfileID(v.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *ReceiptUpdateOne) SetCategory(v *Category) *ReceiptUpdateOne {
	return _u.SetCategoryID(v.ID)
}

// AddFileIDs adds the "files" edge to the ReceiptFile entity by IDs.
func (_u *ReceiptUpdateOne) AddFileIDs(ids ...uuid.UUID) *ReceiptUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the ReceiptFile entity.
func (_u *ReceiptUpdateOne) AddFiles(v ...*ReceiptFile) *ReceiptUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_u *ReceiptUpdateOne) AddJobIDs(ids ...uuid.UUID) *ReceiptUpdateOne {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_u *ReceiptUpdateOne) AddJobs(v ...*ExtractJob) *ReceiptUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the ReceiptMutation object of the builder.
func (_u *ReceiptUpdateOne) Mutation() *ReceiptMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ReceiptUpdateOne) ClearProfile() *ReceiptUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *ReceiptUpdateOne) ClearCategory() *ReceiptUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// ClearFiles clears all "files" edges to the ReceiptFile entity.
func (_u *ReceiptUpdateOne) ClearFiles() *ReceiptUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to ReceiptFile entities by IDs.
func (_u *ReceiptUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *ReceiptUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to ReceiptFile entities.
func (_u *ReceiptUpdateOne) RemoveFiles(v ...*ReceiptFile) *ReceiptUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the ExtractJob entity.
func (_u *ReceiptUpdateOne) ClearJobs() *ReceiptUpdateOne {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to ExtractJob entities by IDs.
func (_u *ReceiptUpdateOne) RemoveJobIDs(ids ...uuid.UUID) *ReceiptUpdateOne {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to ExtractJob entities.
func (_u *ReceiptUpdateOne) RemoveJobs(v ...*ExtractJob) *ReceiptUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Where appends a list predicates to the ReceiptUpdate builder.
func (_u *ReceiptUpdateOne) Where(ps ...predicate.Receipt) *ReceiptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ReceiptUpdateOne) Select(field string, fields ...string) *ReceiptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Receipt entity.
func (_u *ReceiptUpdateOne) Save(ctx context.Context) (*Receipt, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReceiptUpdateOne) SaveX(ctx context.Context) *Receipt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ReceiptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReceiptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ReceiptUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := receipt.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReceiptUpdateOne) check() error {
	if v, ok := _u.mutation.MerchantName(); ok {
		if err := receipt.MerchantNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_name", err: fmt.Errorf(`ent: validator failed for field "Receipt.merchant_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrencyCode(); ok {
		if err := receipt.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Receipt.currency_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentLast4(); ok {
		if err := receipt.PaymentLast4Validator(v); err != nil {
			return &ValidationError{Name: "payment_last4", err: fmt.Errorf(`ent: validator failed for field "Receipt.payment_last4": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Receipt.profile"`)
	}
	if _u.mutation.CategoryCleared() && len(_u.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Receipt.category"`)
	}
	return nil
}

func (_u *ReceiptUpdateOne) sqlSave(ctx context.Context) (_node *Receipt, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receipt.Table, receipt.Columns, sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Receipt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, receipt.FieldID)
		for _, f := range fields {
			if !receipt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != receipt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MerchantName(); ok {
		_spec.SetField(receipt.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subtotal(); ok {
		_spec.SetField(receipt.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubtotal(); ok {
		_spec.AddField(receipt.FieldSubtotal, field.TypeFloat64, value)
	}
	if _u.mutation.SubtotalCleared() {
		_spec.ClearField(receipt.FieldSubtotal, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Tax(); ok {
		_spec.SetField(receipt.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTax(); ok {
		_spec.AddField(receipt.FieldTax, field.TypeFloat64, value)
	}
	if _u.mutation.TaxCleared() {
		_spec.ClearField(receipt.FieldTax, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(receipt.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotal(); ok {
		_spec.AddField(receipt.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CurrencyCode(); ok {
		_spec.SetField(receipt.FieldCurrencyCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.PaymentMethod(); ok {
		_spec.SetField(receipt.FieldPaymentMethod, field.TypeString, value)
	}
	if _u.mutation.PaymentMethodCleared() {
		_spec.ClearField(receipt.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentLast4(); ok {
		_spec.SetField(receipt.FieldPaymentLast4, field.TypeString, value)
	}
	if _u.mutation.PaymentLast4Cleared() {
		_spec.ClearField(receipt.FieldPaymentLast4, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(receipt.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(receipt.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(receipt.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.ProfileTable,
			Columns: []string{receipt.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.ProfileTable,
			Columns: []string{receipt.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.CategoryTable,
			Columns: []string{receipt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.CategoryTable,
			Columns: []string{receipt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Receipt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
