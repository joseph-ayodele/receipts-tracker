// Code generated by ent, DO NOT EDIT.

package extractjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the extractjob type in the database.
	Label = "extract_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFileID holds the string denoting the file_id field in the database.
	FieldFileID = "file_id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldReceiptID holds the string denoting the receipt_id field in the database.
	FieldReceiptID = "receipt_id"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldExtractionConfidence holds the string denoting the extraction_confidence field in the database.
	FieldExtractionConfidence = "extraction_confidence"
	// FieldNeedsReview holds the string denoting the needs_review field in the database.
	FieldNeedsReview = "needs_review"
	// FieldOcrText holds the string denoting the ocr_text field in the database.
	FieldOcrText = "ocr_text"
	// FieldExtractedJSON holds the string denoting the extracted_json field in the database.
	FieldExtractedJSON = "extracted_json"
	// FieldModelName holds the string denoting the model_name field in the database.
	FieldModelName = "model_name"
	// FieldModelParams holds the string denoting the model_params field in the database.
	FieldModelParams = "model_params"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeReceipt holds the string denoting the receipt edge name in mutations.
	EdgeReceipt = "receipt"
	// Table holds the table name of the extractjob in the database.
	Table = "extract_job"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "extract_job"
	// FileInverseTable is the table name for the ReceiptFile entity.
	// It exists in this package in order to avoid circular dependency with the "receiptfile" package.
	FileInverseTable = "receipt_files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_id"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "extract_job"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
	// ReceiptTable is the table that holds the receipt relation/edge.
	ReceiptTable = "extract_job"
	// ReceiptInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptInverseTable = "receipts"
	// ReceiptColumn is the table column denoting the receipt relation/edge.
	ReceiptColumn = "receipt_id"
)

// Columns holds all SQL columns for extractjob fields.
var Columns = []string{
	FieldID,
	FieldFileID,
	FieldProfileID,
	FieldReceiptID,
	FieldFormat,
	FieldStartedAt,
	FieldFinishedAt,
	FieldStatus,
	FieldErrorMessage,
	FieldExtractionConfidence,
	FieldNeedsReview,
	FieldOcrText,
	FieldExtractedJSON,
	FieldModelName,
	FieldModelParams,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FormatValidator is a validator for the "format" field. It is called by the builders before save.
	FormatValidator func(string) error
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultNeedsReview holds the default value on creation for the "needs_review" field.
	DefaultNeedsReview bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ExtractJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFileID orders the results by the file_id field.
func ByFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileID, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByReceiptID orders the results by the receipt_id field.
func ByReceiptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiptID, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByExtractionConfidence orders the results by the extraction_confidence field.
func ByExtractionConfidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtractionConfidence, opts...).ToFunc()
}

// ByNeedsReview orders the results by the needs_review field.
func ByNeedsReview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedsReview, opts...).ToFunc()
}

// ByOcrText orders the results by the ocr_text field.
func ByOcrText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOcrText, opts...).ToFunc()
}

// ByModelName orders the results by the model_name field.
func ByModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelName, opts...).ToFunc()
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiptField orders the results by receipt field.
func ByReceiptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptStep(), sql.OrderByField(field, opts...))
	}
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newReceiptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReceiptTable, ReceiptColumn),
	)
}
