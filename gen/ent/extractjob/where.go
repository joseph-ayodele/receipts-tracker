// Code generated by ent, DO NOT EDIT.

package extractjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldID, id))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFileID, v))
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldProfileID, v))
}

// ReceiptID applies equality check predicate on the "receipt_id" field. It's identical to ReceiptIDEQ.
func ReceiptID(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldReceiptID, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFormat, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFinishedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldErrorMessage, v))
}

// ExtractionConfidence applies equality check predicate on the "extraction_confidence" field. It's identical to ExtractionConfidenceEQ.
func ExtractionConfidence(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldExtractionConfidence, v))
}

// NeedsReview applies equality check predicate on the "needs_review" field. It's identical to NeedsReviewEQ.
func NeedsReview(v bool) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldNeedsReview, v))
}

// OcrText applies equality check predicate on the "ocr_text" field. It's identical to OcrTextEQ.
func OcrText(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldOcrText, v))
}

// ModelName applies equality check predicate on the "model_name" field. It's identical to ModelNameEQ.
func ModelName(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldModelName, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldFileID, vs...))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldProfileID, vs...))
}

// ReceiptIDEQ applies the EQ predicate on the "receipt_id" field.
func ReceiptIDEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldReceiptID, v))
}

// ReceiptIDNEQ applies the NEQ predicate on the "receipt_id" field.
func ReceiptIDNEQ(v uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldReceiptID, v))
}

// ReceiptIDIn applies the In predicate on the "receipt_id" field.
func ReceiptIDIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldReceiptID, vs...))
}

// ReceiptIDNotIn applies the NotIn predicate on the "receipt_id" field.
func ReceiptIDNotIn(vs ...uuid.UUID) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldReceiptID, vs...))
}

// ReceiptIDIsNil applies the IsNil predicate on the "receipt_id" field.
func ReceiptIDIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldReceiptID))
}

// ReceiptIDNotNil applies the NotNil predicate on the "receipt_id" field.
func ReceiptIDNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldReceiptID))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContainsFold(FieldFormat, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldFinishedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContainsFold(FieldErrorMessage, v))
}

// ExtractionConfidenceEQ applies the EQ predicate on the "extraction_confidence" field.
func ExtractionConfidenceEQ(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldExtractionConfidence, v))
}

// ExtractionConfidenceNEQ applies the NEQ predicate on the "extraction_confidence" field.
func ExtractionConfidenceNEQ(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldExtractionConfidence, v))
}

// ExtractionConfidenceIn applies the In predicate on the "extraction_confidence" field.
func ExtractionConfidenceIn(vs ...float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldExtractionConfidence, vs...))
}

// ExtractionConfidenceNotIn applies the NotIn predicate on the "extraction_confidence" field.
func ExtractionConfidenceNotIn(vs ...float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldExtractionConfidence, vs...))
}

// ExtractionConfidenceGT applies the GT predicate on the "extraction_confidence" field.
func ExtractionConfidenceGT(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldExtractionConfidence, v))
}

// ExtractionConfidenceGTE applies the GTE predicate on the "extraction_confidence" field.
func ExtractionConfidenceGTE(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldExtractionConfidence, v))
}

// ExtractionConfidenceLT applies the LT predicate on the "extraction_confidence" field.
func ExtractionConfidenceLT(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldExtractionConfidence, v))
}

// ExtractionConfidenceLTE applies the LTE predicate on the "extraction_confidence" field.
func ExtractionConfidenceLTE(v float32) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldExtractionConfidence, v))
}

// ExtractionConfidenceIsNil applies the IsNil predicate on the "extraction_confidence" field.
func ExtractionConfidenceIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldExtractionConfidence))
}

// ExtractionConfidenceNotNil applies the NotNil predicate on the "extraction_confidence" field.
func ExtractionConfidenceNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldExtractionConfidence))
}

// NeedsReviewEQ applies the EQ predicate on the "needs_review" field.
func NeedsReviewEQ(v bool) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldNeedsReview, v))
}

// NeedsReviewNEQ applies the NEQ predicate on the "needs_review" field.
func NeedsReviewNEQ(v bool) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldNeedsReview, v))
}

// OcrTextEQ applies the EQ predicate on the "ocr_text" field.
func OcrTextEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldOcrText, v))
}

// OcrTextNEQ applies the NEQ predicate on the "ocr_text" field.
func OcrTextNEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldOcrText, v))
}

// OcrTextIn applies the In predicate on the "ocr_text" field.
func OcrTextIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldOcrText, vs...))
}

// OcrTextNotIn applies the NotIn predicate on the "ocr_text" field.
func OcrTextNotIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldOcrText, vs...))
}

// OcrTextGT applies the GT predicate on the "ocr_text" field.
func OcrTextGT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldOcrText, v))
}

// OcrTextGTE applies the GTE predicate on the "ocr_text" field.
func OcrTextGTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldOcrText, v))
}

// OcrTextLT applies the LT predicate on the "ocr_text" field.
func OcrTextLT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldOcrText, v))
}

// OcrTextLTE applies the LTE predicate on the "ocr_text" field.
func OcrTextLTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldOcrText, v))
}

// OcrTextContains applies the Contains predicate on the "ocr_text" field.
func OcrTextContains(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContains(FieldOcrText, v))
}

// OcrTextHasPrefix applies the HasPrefix predicate on the "ocr_text" field.
func OcrTextHasPrefix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasPrefix(FieldOcrText, v))
}

// OcrTextHasSuffix applies the HasSuffix predicate on the "ocr_text" field.
func OcrTextHasSuffix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasSuffix(FieldOcrText, v))
}

// OcrTextIsNil applies the IsNil predicate on the "ocr_text" field.
func OcrTextIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldOcrText))
}

// OcrTextNotNil applies the NotNil predicate on the "ocr_text" field.
func OcrTextNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldOcrText))
}

// OcrTextEqualFold applies the EqualFold predicate on the "ocr_text" field.
func OcrTextEqualFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEqualFold(FieldOcrText, v))
}

// OcrTextContainsFold applies the ContainsFold predicate on the "ocr_text" field.
func OcrTextContainsFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContainsFold(FieldOcrText, v))
}

// ExtractedJSONIsNil applies the IsNil predicate on the "extracted_json" field.
func ExtractedJSONIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldExtractedJSON))
}

// ExtractedJSONNotNil applies the NotNil predicate on the "extracted_json" field.
func ExtractedJSONNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldExtractedJSON))
}

// ModelNameEQ applies the EQ predicate on the "model_name" field.
func ModelNameEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEQ(FieldModelName, v))
}

// ModelNameNEQ applies the NEQ predicate on the "model_name" field.
func ModelNameNEQ(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNEQ(FieldModelName, v))
}

// ModelNameIn applies the In predicate on the "model_name" field.
func ModelNameIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIn(FieldModelName, vs...))
}

// ModelNameNotIn applies the NotIn predicate on the "model_name" field.
func ModelNameNotIn(vs ...string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotIn(FieldModelName, vs...))
}

// ModelNameGT applies the GT predicate on the "model_name" field.
func ModelNameGT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGT(FieldModelName, v))
}

// ModelNameGTE applies the GTE predicate on the "model_name" field.
func ModelNameGTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldGTE(FieldModelName, v))
}

// ModelNameLT applies the LT predicate on the "model_name" field.
func ModelNameLT(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLT(FieldModelName, v))
}

// ModelNameLTE applies the LTE predicate on the "model_name" field.
func ModelNameLTE(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldLTE(FieldModelName, v))
}

// ModelNameContains applies the Contains predicate on the "model_name" field.
func ModelNameContains(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContains(FieldModelName, v))
}

// ModelNameHasPrefix applies the HasPrefix predicate on the "model_name" field.
func ModelNameHasPrefix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasPrefix(FieldModelName, v))
}

// ModelNameHasSuffix applies the HasSuffix predicate on the "model_name" field.
func ModelNameHasSuffix(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldHasSuffix(FieldModelName, v))
}

// ModelNameIsNil applies the IsNil predicate on the "model_name" field.
func ModelNameIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldModelName))
}

// ModelNameNotNil applies the NotNil predicate on the "model_name" field.
func ModelNameNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldModelName))
}

// ModelNameEqualFold applies the EqualFold predicate on the "model_name" field.
func ModelNameEqualFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldEqualFold(FieldModelName, v))
}

// ModelNameContainsFold applies the ContainsFold predicate on the "model_name" field.
func ModelNameContainsFold(v string) predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldContainsFold(FieldModelName, v))
}

// ModelParamsIsNil applies the IsNil predicate on the "model_params" field.
func ModelParamsIsNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldIsNull(FieldModelParams))
}

// ModelParamsNotNil applies the NotNil predicate on the "model_params" field.
func ModelParamsNotNil() predicate.ExtractJob {
	return predicate.ExtractJob(sql.FieldNotNull(FieldModelParams))
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.ReceiptFile) predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceipt applies the HasEdge predicate on the "receipt" edge.
func HasReceipt() predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceiptTable, ReceiptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiptWith applies the HasEdge predicate on the "receipt" edge with a given conditions (other predicates).
func HasReceiptWith(preds ...predicate.Receipt) predicate.ExtractJob {
	return predicate.ExtractJob(func(s *sql.Selector) {
		step := newReceiptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExtractJob) predicate.ExtractJob {
	return predicate.ExtractJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExtractJob) predicate.ExtractJob {
	return predicate.ExtractJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExtractJob) predicate.ExtractJob {
	return predicate.ExtractJob(sql.NotPredicates(p))
}
