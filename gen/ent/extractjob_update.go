// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ExtractJobUpdate is the builder for updating ExtractJob entities.
type ExtractJobUpdate struct {
	config
	hooks    []Hook
	mutation *ExtractJobMutation
}

// Where appends a list predicates to the ExtractJobUpdate builder.
func (_u *ExtractJobUpdate) Where(ps ...predicate.ExtractJob) *ExtractJobUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *ExtractJobUpdate) SetFileID(v uuid.UUID) *ExtractJobUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableFileID(v *uuid.UUID) *ExtractJobUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetProfileID sets the "profile_id" field.
func (_u *ExtractJobUpdate) SetProfileID(v uuid.UUID) *ExtractJobUpdate {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableProfileID(v *uuid.UUID) *ExtractJobUpdate {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetReceiptID sets the "receipt_id" field.
func (_u *ExtractJobUpdate) SetReceiptID(v uuid.UUID) *ExtractJobUpdate {
	_u.mutation.SetReceiptID(v)
	return _u
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableReceiptID(v *uuid.UUID) *ExtractJobUpdate {
	if v != nil {
		_u.SetReceiptID(*v)
	}
	return _u
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (_u *ExtractJobUpdate) ClearReceiptID() *ExtractJobUpdate {
	_u.mutation.ClearReceiptID()
	return _u
}

// SetFormat sets the "format" field.
func (_u *ExtractJobUpdate) SetFormat(v string) *ExtractJobUpdate {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableFormat(v *string) *ExtractJobUpdate {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *ExtractJobUpdate) SetStartedAt(v time.Time) *ExtractJobUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableStartedAt(v *time.Time) *ExtractJobUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *ExtractJobUpdate) SetFinishedAt(v time.Time) *ExtractJobUpdate {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableFinishedAt(v *time.Time) *ExtractJobUpdate {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *ExtractJobUpdate) ClearFinishedAt() *ExtractJobUpdate {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ExtractJobUpdate) SetStatus(v string) *ExtractJobUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableStatus(v *string) *ExtractJobUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ExtractJobUpdate) ClearStatus() *ExtractJobUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *ExtractJobUpdate) SetErrorMessage(v string) *ExtractJobUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableErrorMessage(v *string) *ExtractJobUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *ExtractJobUpdate) ClearErrorMessage() *ExtractJobUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetExtractionConfidence sets the "extraction_confidence" field.
func (_u *ExtractJobUpdate) SetExtractionConfidence(v float32) *ExtractJobUpdate {
	_u.mutation.ResetExtractionConfidence()
	_u.mutation.SetExtractionConfidence(v)
	return _u
}

// SetNillableExtractionConfidence sets the "extraction_confidence" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableExtractionConfidence(v *float32) *ExtractJobUpdate {
	if v != nil {
		_u.SetExtractionConfidence(*v)
	}
	return _u
}

// AddExtractionConfidence adds value to the "extraction_confidence" field.
func (_u *ExtractJobUpdate) AddExtractionConfidence(v float32) *ExtractJobUpdate {
	_u.mutation.AddExtractionConfidence(v)
	return _u
}

// ClearExtractionConfidence clears the value of the "extraction_confidence" field.
func (_u *ExtractJobUpdate) ClearExtractionConfidence() *ExtractJobUpdate {
	_u.mutation.ClearExtractionConfidence()
	return _u
}

// SetNeedsReview sets the "needs_review" field.
func (_u *ExtractJobUpdate) SetNeedsReview(v bool) *ExtractJobUpdate {
	_u.mutation.SetNeedsReview(v)
	return _u
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableNeedsReview(v *bool) *ExtractJobUpdate {
	if v != nil {
		_u.SetNeedsReview(*v)
	}
	return _u
}

// SetOcrText sets the "ocr_text" field.
func (_u *ExtractJobUpdate) SetOcrText(v string) *ExtractJobUpdate {
	_u.mutation.SetOcrText(v)
	return _u
}

// SetNillableOcrText sets the "ocr_text" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableOcrText(v *string) *ExtractJobUpdate {
	if v != nil {
		_u.SetOcrText(*v)
	}
	return _u
}

// ClearOcrText clears the value of the "ocr_text" field.
func (_u *ExtractJobUpdate) ClearOcrText() *ExtractJobUpdate {
	_u.mutation.ClearOcrText()
	return _u
}

// SetExtractedJSON sets the "extracted_json" field.
func (_u *ExtractJobUpdate) SetExtractedJSON(v json.RawMessage) *ExtractJobUpdate {
	_u.mutation.SetExtractedJSON(v)
	return _u
}

// AppendExtractedJSON appends value to the "extracted_json" field.
func (_u *ExtractJobUpdate) AppendExtractedJSON(v json.RawMessage) *ExtractJobUpdate {
	_u.mutation.AppendExtractedJSON(v)
	return _u
}

// ClearExtractedJSON clears the value of the "extracted_json" field.
func (_u *ExtractJobUpdate) ClearExtractedJSON() *ExtractJobUpdate {
	_u.mutation.ClearExtractedJSON()
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *ExtractJobUpdate) SetModelName(v string) *ExtractJobUpdate {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *ExtractJobUpdate) SetNillableModelName(v *string) *ExtractJobUpdate {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// ClearModelName clears the value of the "model_name" field.
func (_u *ExtractJobUpdate) ClearModelName() *ExtractJobUpdate {
	_u.mutation.ClearModelName()
	return _u
}

// SetModelParams sets the "model_params" field.
func (_u *ExtractJobUpdate) SetModelParams(v json.RawMessage) *ExtractJobUpdate {
	_u.mutation.SetModelParams(v)
	return _u
}

// AppendModelParams appends value to the "model_params" field.
func (_u *ExtractJobUpdate) AppendModelParams(v json.RawMessage) *ExtractJobUpdate {
	_u.mutation.AppendModelParams(v)
	return _u
}

// ClearModelParams clears the value of the "model_params" field.
func (_u *ExtractJobUpdate) ClearModelParams() *ExtractJobUpdate {
	_u.mutation.ClearModelParams()
	return _u
}

// SetFile sets the "file" edge to the ReceiptFile entity.
func (_u *ExtractJobUpdate) SetFile(v *ReceiptFile) *ExtractJobUpdate {
	return _u.SetFileID(v.ID)
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ExtractJobUpdate) SetProfile(v *Profile) *ExtractJobUpdate {
	return _u.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_u *ExtractJobUpdate) SetReceipt(v *Receipt) *ExtractJobUpdate {
	return _u.SetReceiptID(v.ID)
}

// Mutation returns the ExtractJobMutation object of the builder.
func (_u *ExtractJobUpdate) Mutation() *ExtractJobMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the ReceiptFile entity.
func (_u *ExtractJobUpdate) ClearFile() *ExtractJobUpdate {
	_u.mutation.ClearFile()
	return _u
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ExtractJobUpdate) ClearProfile() *ExtractJobUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearReceipt clears the "receipt" edge to the Receipt entity.
func (_u *ExtractJobUpdate) ClearReceipt() *ExtractJobUpdate {
	_u.mutation.ClearReceipt()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExtractJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtractJobUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExtractJobUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtractJobUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtractJobUpdate) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := extractjob.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ExtractJob.format": %w`, err)}
		}
	}
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExtractJob.file"`)
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExtractJob.profile"`)
	}
	return nil
}

func (_u *ExtractJobUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extractjob.Table, extractjob.Columns, sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(extractjob.FieldFormat, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(extractjob.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(extractjob.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(extractjob.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(extractjob.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(extractjob.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(extractjob.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(extractjob.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ExtractionConfidence(); ok {
		_spec.SetField(extractjob.FieldExtractionConfidence, field.TypeFloat32, value)
	}
	if value, ok := _u.mutation.AddedExtractionConfidence(); ok {
		_spec.AddField(extractjob.FieldExtractionConfidence, field.TypeFloat32, value)
	}
	if _u.mutation.ExtractionConfidenceCleared() {
		_spec.ClearField(extractjob.FieldExtractionConfidence, field.TypeFloat32)
	}
	if value, ok := _u.mutation.NeedsReview(); ok {
		_spec.SetField(extractjob.FieldNeedsReview, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OcrText(); ok {
		_spec.SetField(extractjob.FieldOcrText, field.TypeString, value)
	}
	if _u.mutation.OcrTextCleared() {
		_spec.ClearField(extractjob.FieldOcrText, field.TypeString)
	}
	if value, ok := _u.mutation.ExtractedJSON(); ok {
		_spec.SetField(extractjob.FieldExtractedJSON, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExtractedJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, extractjob.FieldExtractedJSON, value)
		})
	}
	if _u.mutation.ExtractedJSONCleared() {
		_spec.ClearField(extractjob.FieldExtractedJSON, field.TypeJSON)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(extractjob.FieldModelName, field.TypeString, value)
	}
	if _u.mutation.ModelNameCleared() {
		_spec.ClearField(extractjob.FieldModelName, field.TypeString)
	}
	if value, ok := _u.mutation.ModelParams(); ok {
		_spec.SetField(extractjob.FieldModelParams, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedModelParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, extractjob.FieldModelParams, value)
		})
	}
	if _u.mutation.ModelParamsCleared() {
		_spec.ClearField(extractjob.FieldModelParams, field.TypeJSON)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.FileTable,
			Columns: []string{extractjob.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.FileTable,
			Columns: []string{extractjob.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ProfileTable,
			Columns: []string{extractjob.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ProfileTable,
			Columns: []string{extractjob.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ReceiptTable,
			Columns: []string{extractjob.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ReceiptTable,
			Columns: []string{extractjob.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extractjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExtractJobUpdateOne is the builder for updating a single ExtractJob entity.
type ExtractJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtractJobMutation
}

// SetFileID sets the "file_id" field.
func (_u *ExtractJobUpdateOne) SetFileID(v uuid.UUID) *ExtractJobUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableFileID(v *uuid.UUID) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetProfileID sets the "profile_id" field.
func (_u *ExtractJobUpdateOne) SetProfileID(v uuid.UUID) *ExtractJobUpdateOne {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableProfileID(v *uuid.UUID) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetReceiptID sets the "receipt_id" field.
func (_u *ExtractJobUpdateOne) SetReceiptID(v uuid.UUID) *ExtractJobUpdateOne {
	_u.mutation.SetReceiptID(v)
	return _u
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableReceiptID(v *uuid.UUID) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetReceiptID(*v)
	}
	return _u
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (_u *ExtractJobUpdateOne) ClearReceiptID() *ExtractJobUpdateOne {
	_u.mutation.ClearReceiptID()
	return _u
}

// SetFormat sets the "format" field.
func (_u *ExtractJobUpdateOne) SetFormat(v string) *ExtractJobUpdateOne {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableFormat(v *string) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *ExtractJobUpdateOne) SetStartedAt(v time.Time) *ExtractJobUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableStartedAt(v *time.Time) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *ExtractJobUpdateOne) SetFinishedAt(v time.Time) *ExtractJobUpdateOne {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableFinishedAt(v *time.Time) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *ExtractJobUpdateOne) ClearFinishedAt() *ExtractJobUpdateOne {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ExtractJobUpdateOne) SetStatus(v string) *ExtractJobUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableStatus(v *string) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ExtractJobUpdateOne) ClearStatus() *ExtractJobUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *ExtractJobUpdateOne) SetErrorMessage(v string) *ExtractJobUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableErrorMessage(v *string) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *ExtractJobUpdateOne) ClearErrorMessage() *ExtractJobUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetExtractionConfidence sets the "extraction_confidence" field.
func (_u *ExtractJobUpdateOne) SetExtractionConfidence(v float32) *ExtractJobUpdateOne {
	_u.mutation.ResetExtractionConfidence()
	_u.mutation.SetExtractionConfidence(v)
	return _u
}

// SetNillableExtractionConfidence sets the "extraction_confidence" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableExtractionConfidence(v *float32) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetExtractionConfidence(*v)
	}
	return _u
}

// AddExtractionConfidence adds value to the "extraction_confidence" field.
func (_u *ExtractJobUpdateOne) AddExtractionConfidence(v float32) *ExtractJobUpdateOne {
	_u.mutation.AddExtractionConfidence(v)
	return _u
}

// ClearExtractionConfidence clears the value of the "extraction_confidence" field.
func (_u *ExtractJobUpdateOne) ClearExtractionConfidence() *ExtractJobUpdateOne {
	_u.mutation.ClearExtractionConfidence()
	return _u
}

// SetNeedsReview sets the "needs_review" field.
func (_u *ExtractJobUpdateOne) SetNeedsReview(v bool) *ExtractJobUpdateOne {
	_u.mutation.SetNeedsReview(v)
	return _u
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableNeedsReview(v *bool) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetNeedsReview(*v)
	}
	return _u
}

// SetOcrText sets the "ocr_text" field.
func (_u *ExtractJobUpdateOne) SetOcrText(v string) *ExtractJobUpdateOne {
	_u.mutation.SetOcrText(v)
	return _u
}

// SetNillableOcrText sets the "ocr_text" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableOcrText(v *string) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetOcrText(*v)
	}
	return _u
}

// ClearOcrText clears the value of the "ocr_text" field.
func (_u *ExtractJobUpdateOne) ClearOcrText() *ExtractJobUpdateOne {
	_u.mutation.ClearOcrText()
	return _u
}

// SetExtractedJSON sets the "extracted_json" field.
func (_u *ExtractJobUpdateOne) SetExtractedJSON(v json.RawMessage) *ExtractJobUpdateOne {
	_u.mutation.SetExtractedJSON(v)
	return _u
}

// AppendExtractedJSON appends value to the "extracted_json" field.
func (_u *ExtractJobUpdateOne) AppendExtractedJSON(v json.RawMessage) *ExtractJobUpdateOne {
	_u.mutation.AppendExtractedJSON(v)
	return _u
}

// ClearExtractedJSON clears the value of the "extracted_json" field.
func (_u *ExtractJobUpdateOne) ClearExtractedJSON() *ExtractJobUpdateOne {
	_u.mutation.ClearExtractedJSON()
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *ExtractJobUpdateOne) SetModelName(v string) *ExtractJobUpdateOne {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *ExtractJobUpdateOne) SetNillableModelName(v *string) *ExtractJobUpdateOne {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// ClearModelName clears the value of the "model_name" field.
func (_u *ExtractJobUpdateOne) ClearModelName() *ExtractJobUpdateOne {
	_u.mutation.ClearModelName()
	return _u
}

// SetModelParams sets the "model_params" field.
func (_u *ExtractJobUpdateOne) SetModelParams(v json.RawMessage) *ExtractJobUpdateOne {
	_u.mutation.SetModelParams(v)
	return _u
}

// AppendModelParams appends value to the "model_params" field.
func (_u *ExtractJobUpdateOne) AppendModelParams(v json.RawMessage) *ExtractJobUpdateOne {
	_u.mutation.AppendModelParams(v)
	return _u
}

// ClearModelParams clears the value of the "model_params" field.
func (_u *ExtractJobUpdateOne) ClearModelParams() *ExtractJobUpdateOne {
	_u.mutation.ClearModelParams()
	return _u
}

// SetFile sets the "file" edge to the ReceiptFile entity.
func (_u *ExtractJobUpdateOne) SetFile(v *ReceiptFile) *ExtractJobUpdateOne {
	return _u.SetFileID(v.ID)
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ExtractJobUpdateOne) SetProfile(v *Profile) *ExtractJobUpdateOne {
	return _u.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_u *ExtractJobUpdateOne) SetReceipt(v *Receipt) *ExtractJobUpdateOne {
	return _u.SetReceiptID(v.ID)
}

// Mutation returns the ExtractJobMutation object of the builder.
func (_u *ExtractJobUpdateOne) Mutation() *ExtractJobMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the ReceiptFile entity.
func (_u *ExtractJobUpdateOne) ClearFile() *ExtractJobUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ExtractJobUpdateOne) ClearProfile() *ExtractJobUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearReceipt clears the "receipt" edge to the Receipt entity.
func (_u *ExtractJobUpdateOne) ClearReceipt() *ExtractJobUpdateOne {
	_u.mutation.ClearReceipt()
	return _u
}

// Where appends a list predicates to the ExtractJobUpdate builder.
func (_u *ExtractJobUpdateOne) Where(ps ...predicate.ExtractJob) *ExtractJobUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExtractJobUpdateOne) Select(field string, fields ...string) *ExtractJobUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExtractJob entity.
func (_u *ExtractJobUpdateOne) Save(ctx context.Context) (*ExtractJob, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtractJobUpdateOne) SaveX(ctx context.Context) *ExtractJob {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExtractJobUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtractJobUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtractJobUpdateOne) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := extractjob.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ExtractJob.format": %w`, err)}
		}
	}
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExtractJob.file"`)
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExtractJob.profile"`)
	}
	return nil
}

func (_u *ExtractJobUpdateOne) sqlSave(ctx context.Context) (_node *ExtractJob, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extractjob.Table, extractjob.Columns, sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExtractJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extractjob.FieldID)
		for _, f := range fields {
			if !extractjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != extractjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(extractjob.FieldFormat, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(extractjob.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(extractjob.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(extractjob.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(extractjob.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(extractjob.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(extractjob.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(extractjob.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ExtractionConfidence(); ok {
		_spec.SetField(extractjob.FieldExtractionConfidence, field.TypeFloat32, value)
	}
	if value, ok := _u.mutation.AddedExtractionConfidence(); ok {
		_spec.AddField(extractjob.FieldExtractionConfidence, field.TypeFloat32, value)
	}
	if _u.mutation.ExtractionConfidenceCleared() {
		_spec.ClearField(extractjob.FieldExtractionConfidence, field.TypeFloat32)
	}
	if value, ok := _u.mutation.NeedsReview(); ok {
		_spec.SetField(extractjob.FieldNeedsReview, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OcrText(); ok {
		_spec.SetField(extractjob.FieldOcrText, field.TypeString, value)
	}
	if _u.mutation.OcrTextCleared() {
		_spec.ClearField(extractjob.FieldOcrText, field.TypeString)
	}
	if value, ok := _u.mutation.ExtractedJSON(); ok {
		_spec.SetField(extractjob.FieldExtractedJSON, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExtractedJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, extractjob.FieldExtractedJSON, value)
		})
	}
	if _u.mutation.ExtractedJSONCleared() {
		_spec.ClearField(extractjob.FieldExtractedJSON, field.TypeJSON)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(extractjob.FieldModelName, field.TypeString, value)
	}
	if _u.mutation.ModelNameCleared() {
		_spec.ClearField(extractjob.FieldModelName, field.TypeString)
	}
	if value, ok := _u.mutation.ModelParams(); ok {
		_spec.SetField(extractjob.FieldModelParams, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedModelParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, extractjob.FieldModelParams, value)
		})
	}
	if _u.mutation.ModelParamsCleared() {
		_spec.ClearField(extractjob.FieldModelParams, field.TypeJSON)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.FileTable,
			Columns: []string{extractjob.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.FileTable,
			Columns: []string{extractjob.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ProfileTable,
			Columns: []string{extractjob.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ProfileTable,
			Columns: []string{extractjob.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ReceiptTable,
			Columns: []string{extractjob.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ReceiptTable,
			Columns: []string{extractjob.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExtractJob{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extractjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
