// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ReceiptFileCreate is the builder for creating a ReceiptFile entity.
type ReceiptFileCreate struct {
	config
	mutation *ReceiptFileMutation
	hooks    []Hook
}

// SetProfileID sets the "profile_id" field.
func (_c *ReceiptFileCreate) SetProfileID(v uuid.UUID) *ReceiptFileCreate {
	_c.mutation.SetProfileID(v)
	return _c
}

// SetReceiptID sets the "receipt_id" field.
func (_c *ReceiptFileCreate) SetReceiptID(v uuid.UUID) *ReceiptFileCreate {
	_c.mutation.SetReceiptID(v)
	return _c
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_c *ReceiptFileCreate) SetNillableReceiptID(v *uuid.UUID) *ReceiptFileCreate {
	if v != nil {
		_c.SetReceiptID(*v)
	}
	return _c
}

// SetSourcePath sets the "source_path" field.
func (_c *ReceiptFileCreate) SetSourcePath(v string) *ReceiptFileCreate {
	_c.mutation.SetSourcePath(v)
	return _c
}

// SetContentHash sets the "content_hash" field.
func (_c *ReceiptFileCreate) SetContentHash(v []byte) *ReceiptFileCreate {
	_c.mutation.SetContentHash(v)
	return _c
}

// SetFileExt sets the "file_ext" field.
func (_c *ReceiptFileCreate) SetFileExt(v string) *ReceiptFileCreate {
	_c.mutation.SetFileExt(v)
	return _c
}

// SetUploadedAt sets the "uploaded_at" field.
func (_c *ReceiptFileCreate) SetUploadedAt(v time.Time) *ReceiptFileCreate {
	_c.mutation.SetUploadedAt(v)
	return _c
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (_c *ReceiptFileCreate) SetNillableUploadedAt(v *time.Time) *ReceiptFileCreate {
	if v != nil {
		_c.SetUploadedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ReceiptFileCreate) SetID(v uuid.UUID) *ReceiptFileCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ReceiptFileCreate) SetNillableID(v *uuid.UUID) *ReceiptFileCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_c *ReceiptFileCreate) SetProfile(v *Profile) *ReceiptFileCreate {
	return _c.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_c *ReceiptFileCreate) SetReceipt(v *Receipt) *ReceiptFileCreate {
	return _c.SetReceiptID(v.ID)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_c *ReceiptFileCreate) AddJobIDs(ids ...uuid.UUID) *ReceiptFileCreate {
	_c.mutation.AddJobIDs(ids...)
	return _c
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_c *ReceiptFileCreate) AddJobs(v ...*ExtractJob) *ReceiptFileCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobIDs(ids...)
}

// Mutation returns the ReceiptFileMutation object of the builder.
func (_c *ReceiptFileCreate) Mutation() *ReceiptFileMutation {
	return _c.mutation
}

// Save creates the ReceiptFile in the database.
func (_c *ReceiptFileCreate) Save(ctx context.Context) (*ReceiptFile, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ReceiptFileCreate) SaveX(ctx context.Context) *ReceiptFile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReceiptFileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReceiptFileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ReceiptFileCreate) defaults() {
	if _, ok := _c.mutation.UploadedAt(); !ok {
		v := receiptfile.DefaultUploadedAt()
		_c.mutation.SetUploadedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := receiptfile.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ReceiptFileCreate) check() error {
	if _, ok := _c.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "ReceiptFile.profile_id"`)}
	}
	if _, ok := _c.mutation.SourcePath(); !ok {
		return &ValidationError{Name: "source_path", err: errors.New(`ent: missing required field "ReceiptFile.source_path"`)}
	}
	if v, ok := _c.mutation.SourcePath(); ok {
		if err := receiptfile.SourcePathValidator(v); err != nil {
			return &ValidationError{Name: "source_path", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.source_path": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ContentHash(); !ok {
		return &ValidationError{Name: "content_hash", err: errors.New(`ent: missing required field "ReceiptFile.content_hash"`)}
	}
	if v, ok := _c.mutation.ContentHash(); ok {
		if err := receiptfile.ContentHashValidator(v); err != nil {
			return &ValidationError{Name: "content_hash", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.content_hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FileExt(); !ok {
		return &ValidationError{Name: "file_ext", err: errors.New(`ent: missing required field "ReceiptFile.file_ext"`)}
	}
	if v, ok := _c.mutation.FileExt(); ok {
		if err := receiptfile.FileExtValidator(v); err != nil {
			return &ValidationError{Name: "file_ext", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.file_ext": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UploadedAt(); !ok {
		return &ValidationError{Name: "uploaded_at", err: errors.New(`ent: missing required field "ReceiptFile.uploaded_at"`)}
	}
	if len(_c.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "ReceiptFile.profile"`)}
	}
	return nil
}

func (_c *ReceiptFileCreate) sqlSave(ctx context.Context) (*ReceiptFile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ReceiptFileCreate) createSpec() (*ReceiptFile, *sqlgraph.CreateSpec) {
	var (
		_node = &ReceiptFile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(receiptfile.Table, sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.SourcePath(); ok {
		_spec.SetField(receiptfile.FieldSourcePath, field.TypeString, value)
		_node.SourcePath = value
	}
	if value, ok := _c.mutation.ContentHash(); ok {
		_spec.SetField(receiptfile.FieldContentHash, field.TypeBytes, value)
		_node.ContentHash = value
	}
	if value, ok := _c.mutation.FileExt(); ok {
		_spec.SetField(receiptfile.FieldFileExt, field.TypeString, value)
		_node.FileExt = value
	}
	if value, ok := _c.mutation.UploadedAt(); ok {
		_spec.SetField(receiptfile.FieldUploadedAt, field.TypeTime, value)
		_node.UploadedAt = value
	}
	if nodes := _c.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ProfileTable,
			Columns: []string{receiptfile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ReceiptTable,
			Columns: []string{receiptfile.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiptID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReceiptFileCreateBulk is the builder for creating many ReceiptFile entities in bulk.
type ReceiptFileCreateBulk struct {
	config
	err      error
	builders []*ReceiptFileCreate
}

// Save creates the ReceiptFile entities in the database.
func (_c *ReceiptFileCreateBulk) Save(ctx context.Context) ([]*ReceiptFile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ReceiptFile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReceiptFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ReceiptFileCreateBulk) SaveX(ctx context.Context) []*ReceiptFile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReceiptFileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReceiptFileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
