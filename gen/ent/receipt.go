// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
)

// Receipt is the model entity for the Receipt schema.
type Receipt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profile_id,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID *uuid.UUID `json:"file_id,omitempty"`
	// MerchantName holds the value of the "merchant_name" field.
	MerchantName string `json:"merchant_name,omitempty"`
	// TxDate holds the value of the "tx_date" field.
	TxDate time.Time `json:"tx_date,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal *float64 `json:"subtotal,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax *float64 `json:"tax,omitempty"`
	// Total holds the value of the "total" field.
	Total float64 `json:"total,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode string `json:"currency_code,omitempty"`
	// CategoryName holds the value of the "category_name" field.
	CategoryName string `json:"category_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath *string `json:"file_path,omitempty"`
	// IsCurrent holds the value of the "is_current" field.
	IsCurrent bool `json:"is_current,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiptQuery when eager-loading is set.
	Edges        ReceiptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReceiptEdges holds the relations/edges for other nodes in the graph.
type ReceiptEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Files holds the value of the files edge.
	Files []*ReceiptFile `json:"files,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*ExtractJob `json:"jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiptEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiptEdges) FilesOrErr() ([]*ReceiptFile, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiptEdges) JobsOrErr() ([]*ExtractJob, error) {
	if e.loadedTypes[2] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receipt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receipt.FieldFileID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case receipt.FieldIsCurrent:
			values[i] = new(sql.NullBool)
		case receipt.FieldSubtotal, receipt.FieldTax, receipt.FieldTotal:
			values[i] = new(sql.NullFloat64)
		case receipt.FieldMerchantName, receipt.FieldCurrencyCode, receipt.FieldCategoryName, receipt.FieldDescription, receipt.FieldFilePath:
			values[i] = new(sql.NullString)
		case receipt.FieldTxDate, receipt.FieldCreatedAt, receipt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case receipt.FieldID, receipt.FieldProfileID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receipt fields.
func (_m *Receipt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receipt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case receipt.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				_m.ProfileID = *value
			}
		case receipt.FieldFileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				_m.FileID = new(uuid.UUID)
				*_m.FileID = *value.S.(*uuid.UUID)
			}
		case receipt.FieldMerchantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_name", values[i])
			} else if value.Valid {
				_m.MerchantName = value.String
			}
		case receipt.FieldTxDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tx_date", values[i])
			} else if value.Valid {
				_m.TxDate = value.Time
			}
		case receipt.FieldSubtotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value.Valid {
				_m.Subtotal = new(float64)
				*_m.Subtotal = value.Float64
			}
		case receipt.FieldTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				_m.Tax = new(float64)
				*_m.Tax = value.Float64
			}
		case receipt.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				_m.Total = value.Float64
			}
		case receipt.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				_m.CurrencyCode = value.String
			}
		case receipt.FieldCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_name", values[i])
			} else if value.Valid {
				_m.CategoryName = value.String
			}
		case receipt.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case receipt.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				_m.FilePath = new(string)
				*_m.FilePath = value.String
			}
		case receipt.FieldIsCurrent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_current", values[i])
			} else if value.Valid {
				_m.IsCurrent = value.Bool
			}
		case receipt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case receipt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Receipt.
// This includes values selected through modifiers, order, etc.
func (_m *Receipt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Receipt entity.
func (_m *Receipt) QueryProfile() *ProfileQuery {
	return NewReceiptClient(_m.config).QueryProfile(_m)
}

// QueryFiles queries the "files" edge of the Receipt entity.
func (_m *Receipt) QueryFiles() *ReceiptFileQuery {
	return NewReceiptClient(_m.config).QueryFiles(_m)
}

// QueryJobs queries the "jobs" edge of the Receipt entity.
func (_m *Receipt) QueryJobs() *ExtractJobQuery {
	return NewReceiptClient(_m.config).QueryJobs(_m)
}

// Update returns a builder for updating this Receipt.
// Note that you need to call Receipt.Unwrap() before calling this method if this Receipt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Receipt) Update() *ReceiptUpdateOne {
	return NewReceiptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Receipt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Receipt) Unwrap() *Receipt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Receipt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Receipt) String() string {
	var builder strings.Builder
	builder.WriteString("Receipt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProfileID))
	builder.WriteString(", ")
	if v := _m.FileID; v != nil {
		builder.WriteString("file_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("merchant_name=")
	builder.WriteString(_m.MerchantName)
	builder.WriteString(", ")
	builder.WriteString("tx_date=")
	builder.WriteString(_m.TxDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.Subtotal; v != nil {
		builder.WriteString("subtotal=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Tax; v != nil {
		builder.WriteString("tax=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", _m.Total))
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(_m.CurrencyCode)
	builder.WriteString(", ")
	builder.WriteString("category_name=")
	builder.WriteString(_m.CategoryName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	if v := _m.FilePath; v != nil {
		builder.WriteString("file_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_current=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsCurrent))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Receipts is a parsable slice of Receipt.
type Receipts []*Receipt
