// Code generated by ent, DO NOT EDIT.

package profile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldName, v))
}

// JobTitle applies equality check predicate on the "job_title" field. It's identical to JobTitleEQ.
func JobTitle(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldJobTitle, v))
}

// JobDescription applies equality check predicate on the "job_description" field. It's identical to JobDescriptionEQ.
func JobDescription(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldJobDescription, v))
}

// DefaultCurrency applies equality check predicate on the "default_currency" field. It's identical to DefaultCurrencyEQ.
func DefaultCurrency(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldDefaultCurrency, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldName, v))
}

// JobTitleEQ applies the EQ predicate on the "job_title" field.
func JobTitleEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldJobTitle, v))
}

// JobTitleNEQ applies the NEQ predicate on the "job_title" field.
func JobTitleNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldJobTitle, v))
}

// JobTitleIn applies the In predicate on the "job_title" field.
func JobTitleIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldJobTitle, vs...))
}

// JobTitleNotIn applies the NotIn predicate on the "job_title" field.
func JobTitleNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldJobTitle, vs...))
}

// JobTitleGT applies the GT predicate on the "job_title" field.
func JobTitleGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldJobTitle, v))
}

// JobTitleGTE applies the GTE predicate on the "job_title" field.
func JobTitleGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldJobTitle, v))
}

// JobTitleLT applies the LT predicate on the "job_title" field.
func JobTitleLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldJobTitle, v))
}

// JobTitleLTE applies the LTE predicate on the "job_title" field.
func JobTitleLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldJobTitle, v))
}

// JobTitleContains applies the Contains predicate on the "job_title" field.
func JobTitleContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldJobTitle, v))
}

// JobTitleHasPrefix applies the HasPrefix predicate on the "job_title" field.
func JobTitleHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldJobTitle, v))
}

// JobTitleHasSuffix applies the HasSuffix predicate on the "job_title" field.
func JobTitleHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldJobTitle, v))
}

// JobTitleIsNil applies the IsNil predicate on the "job_title" field.
func JobTitleIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldJobTitle))
}

// JobTitleNotNil applies the NotNil predicate on the "job_title" field.
func JobTitleNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldJobTitle))
}

// JobTitleEqualFold applies the EqualFold predicate on the "job_title" field.
func JobTitleEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldJobTitle, v))
}

// JobTitleContainsFold applies the ContainsFold predicate on the "job_title" field.
func JobTitleContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldJobTitle, v))
}

// JobDescriptionEQ applies the EQ predicate on the "job_description" field.
func JobDescriptionEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldJobDescription, v))
}

// JobDescriptionNEQ applies the NEQ predicate on the "job_description" field.
func JobDescriptionNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldJobDescription, v))
}

// JobDescriptionIn applies the In predicate on the "job_description" field.
func JobDescriptionIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldJobDescription, vs...))
}

// JobDescriptionNotIn applies the NotIn predicate on the "job_description" field.
func JobDescriptionNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldJobDescription, vs...))
}

// JobDescriptionGT applies the GT predicate on the "job_description" field.
func JobDescriptionGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldJobDescription, v))
}

// JobDescriptionGTE applies the GTE predicate on the "job_description" field.
func JobDescriptionGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldJobDescription, v))
}

// JobDescriptionLT applies the LT predicate on the "job_description" field.
func JobDescriptionLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldJobDescription, v))
}

// JobDescriptionLTE applies the LTE predicate on the "job_description" field.
func JobDescriptionLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldJobDescription, v))
}

// JobDescriptionContains applies the Contains predicate on the "job_description" field.
func JobDescriptionContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldJobDescription, v))
}

// JobDescriptionHasPrefix applies the HasPrefix predicate on the "job_description" field.
func JobDescriptionHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldJobDescription, v))
}

// JobDescriptionHasSuffix applies the HasSuffix predicate on the "job_description" field.
func JobDescriptionHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldJobDescription, v))
}

// JobDescriptionIsNil applies the IsNil predicate on the "job_description" field.
func JobDescriptionIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldJobDescription))
}

// JobDescriptionNotNil applies the NotNil predicate on the "job_description" field.
func JobDescriptionNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldJobDescription))
}

// JobDescriptionEqualFold applies the EqualFold predicate on the "job_description" field.
func JobDescriptionEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldJobDescription, v))
}

// JobDescriptionContainsFold applies the ContainsFold predicate on the "job_description" field.
func JobDescriptionContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldJobDescription, v))
}

// DefaultCurrencyEQ applies the EQ predicate on the "default_currency" field.
func DefaultCurrencyEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldDefaultCurrency, v))
}

// DefaultCurrencyNEQ applies the NEQ predicate on the "default_currency" field.
func DefaultCurrencyNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldDefaultCurrency, v))
}

// DefaultCurrencyIn applies the In predicate on the "default_currency" field.
func DefaultCurrencyIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldDefaultCurrency, vs...))
}

// DefaultCurrencyNotIn applies the NotIn predicate on the "default_currency" field.
func DefaultCurrencyNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldDefaultCurrency, vs...))
}

// DefaultCurrencyGT applies the GT predicate on the "default_currency" field.
func DefaultCurrencyGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldDefaultCurrency, v))
}

// DefaultCurrencyGTE applies the GTE predicate on the "default_currency" field.
func DefaultCurrencyGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldDefaultCurrency, v))
}

// DefaultCurrencyLT applies the LT predicate on the "default_currency" field.
func DefaultCurrencyLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldDefaultCurrency, v))
}

// DefaultCurrencyLTE applies the LTE predicate on the "default_currency" field.
func DefaultCurrencyLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldDefaultCurrency, v))
}

// DefaultCurrencyContains applies the Contains predicate on the "default_currency" field.
func DefaultCurrencyContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldDefaultCurrency, v))
}

// DefaultCurrencyHasPrefix applies the HasPrefix predicate on the "default_currency" field.
func DefaultCurrencyHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldDefaultCurrency, v))
}

// DefaultCurrencyHasSuffix applies the HasSuffix predicate on the "default_currency" field.
func DefaultCurrencyHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldDefaultCurrency, v))
}

// DefaultCurrencyEqualFold applies the EqualFold predicate on the "default_currency" field.
func DefaultCurrencyEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldDefaultCurrency, v))
}

// DefaultCurrencyContainsFold applies the ContainsFold predicate on the "default_currency" field.
func DefaultCurrencyContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldDefaultCurrency, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasReceipts applies the HasEdge predicate on the "receipts" edge.
func HasReceipts() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceiptsTable, ReceiptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiptsWith applies the HasEdge predicate on the "receipts" edge with a given conditions (other predicates).
func HasReceiptsWith(preds ...predicate.Receipt) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newReceiptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.ReceiptFile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.ExtractJob) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.NotPredicates(p))
}
