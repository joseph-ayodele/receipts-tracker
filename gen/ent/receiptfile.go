// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ReceiptFile is the model entity for the ReceiptFile schema.
type ReceiptFile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profile_id,omitempty"`
	// SourcePath holds the value of the "source_path" field.
	SourcePath string `json:"source_path,omitempty"`
	// ContentHash holds the value of the "content_hash" field.
	ContentHash []byte `json:"content_hash,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// FileExt holds the value of the "file_ext" field.
	FileExt string `json:"file_ext,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int `json:"file_size,omitempty"`
	// UploadedAt holds the value of the "uploaded_at" field.
	UploadedAt time.Time `json:"uploaded_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiptFileQuery when eager-loading is set.
	Edges         ReceiptFileEdges `json:"edges"`
	receipt_files *uuid.UUID
	selectValues  sql.SelectValues
}

// ReceiptFileEdges holds the relations/edges for other nodes in the graph.
type ReceiptFileEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*ExtractJob `json:"jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiptFileEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiptFileEdges) JobsOrErr() ([]*ExtractJob, error) {
	if e.loadedTypes[1] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReceiptFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receiptfile.FieldContentHash:
			values[i] = new([]byte)
		case receiptfile.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case receiptfile.FieldSourcePath, receiptfile.FieldFilename, receiptfile.FieldFileExt:
			values[i] = new(sql.NullString)
		case receiptfile.FieldUploadedAt:
			values[i] = new(sql.NullTime)
		case receiptfile.FieldID, receiptfile.FieldProfileID:
			values[i] = new(uuid.UUID)
		case receiptfile.ForeignKeys[0]: // receipt_files
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReceiptFile fields.
func (_m *ReceiptFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receiptfile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case receiptfile.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				_m.ProfileID = *value
			}
		case receiptfile.FieldSourcePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_path", values[i])
			} else if value.Valid {
				_m.SourcePath = value.String
			}
		case receiptfile.FieldContentHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content_hash", values[i])
			} else if value != nil {
				_m.ContentHash = *value
			}
		case receiptfile.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				_m.Filename = value.String
			}
		case receiptfile.FieldFileExt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_ext", values[i])
			} else if value.Valid {
				_m.FileExt = value.String
			}
		case receiptfile.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				_m.FileSize = int(value.Int64)
			}
		case receiptfile.FieldUploadedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field uploaded_at", values[i])
			} else if value.Valid {
				_m.UploadedAt = value.Time
			}
		case receiptfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field receipt_files", values[i])
			} else if value.Valid {
				_m.receipt_files = new(uuid.UUID)
				*_m.receipt_files = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReceiptFile.
// This includes values selected through modifiers, order, etc.
func (_m *ReceiptFile) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the ReceiptFile entity.
func (_m *ReceiptFile) QueryProfile() *ProfileQuery {
	return NewReceiptFileClient(_m.config).QueryProfile(_m)
}

// QueryJobs queries the "jobs" edge of the ReceiptFile entity.
func (_m *ReceiptFile) QueryJobs() *ExtractJobQuery {
	return NewReceiptFileClient(_m.config).QueryJobs(_m)
}

// Update returns a builder for updating this ReceiptFile.
// Note that you need to call ReceiptFile.Unwrap() before calling this method if this ReceiptFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ReceiptFile) Update() *ReceiptFileUpdateOne {
	return NewReceiptFileClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ReceiptFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ReceiptFile) Unwrap() *ReceiptFile {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReceiptFile is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ReceiptFile) String() string {
	var builder strings.Builder
	builder.WriteString("ReceiptFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("source_path=")
	builder.WriteString(_m.SourcePath)
	builder.WriteString(", ")
	builder.WriteString("content_hash=")
	builder.WriteString(fmt.Sprintf("%v", _m.ContentHash))
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(_m.Filename)
	builder.WriteString(", ")
	builder.WriteString("file_ext=")
	builder.WriteString(_m.FileExt)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", _m.FileSize))
	builder.WriteString(", ")
	builder.WriteString("uploaded_at=")
	builder.WriteString(_m.UploadedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReceiptFiles is a parsable slice of ReceiptFile.
type ReceiptFiles []*ReceiptFile
