// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/category"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CategoryUpdate) SetName(v string) *CategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableName(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *CategoryUpdate) SetCategoryType(v category.CategoryType) *CategoryUpdate {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCategoryType(v *category.CategoryType) *CategoryUpdate {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (_u *CategoryUpdate) AddReceiptIDs(ids ...uuid.UUID) *CategoryUpdate {
	_u.mutation.AddReceiptIDs(ids...)
	return _u
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (_u *CategoryUpdate) AddReceipts(v ...*Receipt) *CategoryUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReceiptIDs(ids...)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdate) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (_u *CategoryUpdate) ClearReceipts() *CategoryUpdate {
	_u.mutation.ClearReceipts()
	return _u
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (_u *CategoryUpdate) RemoveReceiptIDs(ids ...uuid.UUID) *CategoryUpdate {
	_u.mutation.RemoveReceiptIDs(ids...)
	return _u
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (_u *CategoryUpdate) RemoveReceipts(v ...*Receipt) *CategoryUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReceiptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CategoryUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Category.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CategoryType(); ok {
		if err := category.CategoryTypeValidator(v); err != nil {
			return &ValidationError{Name: "category_type", err: fmt.Errorf(`ent: validator failed for field "Category.category_type": %w`, err)}
		}
	}
	return nil
}

func (_u *CategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(category.FieldCategoryType, field.TypeEnum, value)
	}
	if _u.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !_u.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMutation
}

// SetName sets the "name" field.
func (_u *CategoryUpdateOne) SetName(v string) *CategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableName(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *CategoryUpdateOne) SetCategoryType(v category.CategoryType) *CategoryUpdateOne {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCategoryType(v *category.CategoryType) *CategoryUpdateOne {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (_u *CategoryUpdateOne) AddReceiptIDs(ids ...uuid.UUID) *CategoryUpdateOne {
	_u.mutation.AddReceiptIDs(ids...)
	return _u
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (_u *CategoryUpdateOne) AddReceipts(v ...*Receipt) *CategoryUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReceiptIDs(ids...)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdateOne) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (_u *CategoryUpdateOne) ClearReceipts() *CategoryUpdateOne {
	_u.mutation.ClearReceipts()
	return _u
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (_u *CategoryUpdateOne) RemoveReceiptIDs(ids ...uuid.UUID) *CategoryUpdateOne {
	_u.mutation.RemoveReceiptIDs(ids...)
	return _u
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (_u *CategoryUpdateOne) RemoveReceipts(v ...*Receipt) *CategoryUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReceiptIDs(ids...)
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Category entity.
func (_u *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CategoryUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Category.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CategoryType(); ok {
		if err := category.CategoryTypeValidator(v); err != nil {
			return &ValidationError{Name: "category_type", err: fmt.Errorf(`ent: validator failed for field "Category.category_type": %w`, err)}
		}
	}
	return nil
}

func (_u *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(category.FieldCategoryType, field.TypeEnum, value)
	}
	if _u.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !_u.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ReceiptsTable,
			Columns: []string{category.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Category{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
