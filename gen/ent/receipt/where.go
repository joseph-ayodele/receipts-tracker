// Code generated by ent, DO NOT EDIT.

package receipt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldID, id))
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldProfileID, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldFileID, v))
}

// MerchantName applies equality check predicate on the "merchant_name" field. It's identical to MerchantNameEQ.
func MerchantName(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldMerchantName, v))
}

// TxDate applies equality check predicate on the "tx_date" field. It's identical to TxDateEQ.
func TxDate(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTxDate, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSubtotal, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTax, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTotal, v))
}

// CurrencyCode applies equality check predicate on the "currency_code" field. It's identical to CurrencyCodeEQ.
func CurrencyCode(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCurrencyCode, v))
}

// CategoryName applies equality check predicate on the "category_name" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCategoryName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldDescription, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldFilePath, v))
}

// IsCurrent applies equality check predicate on the "is_current" field. It's identical to IsCurrentEQ.
func IsCurrent(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldIsCurrent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldProfileID, vs...))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v uuid.UUID) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldFileID, v))
}

// FileIDIsNil applies the IsNil predicate on the "file_id" field.
func FileIDIsNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldIsNull(FieldFileID))
}

// FileIDNotNil applies the NotNil predicate on the "file_id" field.
func FileIDNotNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldNotNull(FieldFileID))
}

// MerchantNameEQ applies the EQ predicate on the "merchant_name" field.
func MerchantNameEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldMerchantName, v))
}

// MerchantNameNEQ applies the NEQ predicate on the "merchant_name" field.
func MerchantNameNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldMerchantName, v))
}

// MerchantNameIn applies the In predicate on the "merchant_name" field.
func MerchantNameIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldMerchantName, vs...))
}

// MerchantNameNotIn applies the NotIn predicate on the "merchant_name" field.
func MerchantNameNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldMerchantName, vs...))
}

// MerchantNameGT applies the GT predicate on the "merchant_name" field.
func MerchantNameGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldMerchantName, v))
}

// MerchantNameGTE applies the GTE predicate on the "merchant_name" field.
func MerchantNameGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldMerchantName, v))
}

// MerchantNameLT applies the LT predicate on the "merchant_name" field.
func MerchantNameLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldMerchantName, v))
}

// MerchantNameLTE applies the LTE predicate on the "merchant_name" field.
func MerchantNameLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldMerchantName, v))
}

// MerchantNameContains applies the Contains predicate on the "merchant_name" field.
func MerchantNameContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldMerchantName, v))
}

// MerchantNameHasPrefix applies the HasPrefix predicate on the "merchant_name" field.
func MerchantNameHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldMerchantName, v))
}

// MerchantNameHasSuffix applies the HasSuffix predicate on the "merchant_name" field.
func MerchantNameHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldMerchantName, v))
}

// MerchantNameEqualFold applies the EqualFold predicate on the "merchant_name" field.
func MerchantNameEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldMerchantName, v))
}

// MerchantNameContainsFold applies the ContainsFold predicate on the "merchant_name" field.
func MerchantNameContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldMerchantName, v))
}

// TxDateEQ applies the EQ predicate on the "tx_date" field.
func TxDateEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTxDate, v))
}

// TxDateNEQ applies the NEQ predicate on the "tx_date" field.
func TxDateNEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldTxDate, v))
}

// TxDateIn applies the In predicate on the "tx_date" field.
func TxDateIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldTxDate, vs...))
}

// TxDateNotIn applies the NotIn predicate on the "tx_date" field.
func TxDateNotIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldTxDate, vs...))
}

// TxDateGT applies the GT predicate on the "tx_date" field.
func TxDateGT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldTxDate, v))
}

// TxDateGTE applies the GTE predicate on the "tx_date" field.
func TxDateGTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldTxDate, v))
}

// TxDateLT applies the LT predicate on the "tx_date" field.
func TxDateLT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldTxDate, v))
}

// TxDateLTE applies the LTE predicate on the "tx_date" field.
func TxDateLTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldTxDate, v))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldSubtotal, v))
}

// SubtotalIsNil applies the IsNil predicate on the "subtotal" field.
func SubtotalIsNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldIsNull(FieldSubtotal))
}

// SubtotalNotNil applies the NotNil predicate on the "subtotal" field.
func SubtotalNotNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldNotNull(FieldSubtotal))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldTax, v))
}

// TaxIsNil applies the IsNil predicate on the "tax" field.
func TaxIsNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldIsNull(FieldTax))
}

// TaxNotNil applies the NotNil predicate on the "tax" field.
func TaxNotNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldNotNull(FieldTax))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldTotal, v))
}

// CurrencyCodeEQ applies the EQ predicate on the "currency_code" field.
func CurrencyCodeEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCurrencyCode, v))
}

// CurrencyCodeNEQ applies the NEQ predicate on the "currency_code" field.
func CurrencyCodeNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldCurrencyCode, v))
}

// CurrencyCodeIn applies the In predicate on the "currency_code" field.
func CurrencyCodeIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeNotIn applies the NotIn predicate on the "currency_code" field.
func CurrencyCodeNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeGT applies the GT predicate on the "currency_code" field.
func CurrencyCodeGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldCurrencyCode, v))
}

// CurrencyCodeGTE applies the GTE predicate on the "currency_code" field.
func CurrencyCodeGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldCurrencyCode, v))
}

// CurrencyCodeLT applies the LT predicate on the "currency_code" field.
func CurrencyCodeLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldCurrencyCode, v))
}

// CurrencyCodeLTE applies the LTE predicate on the "currency_code" field.
func CurrencyCodeLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldCurrencyCode, v))
}

// CurrencyCodeContains applies the Contains predicate on the "currency_code" field.
func CurrencyCodeContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldCurrencyCode, v))
}

// CurrencyCodeHasPrefix applies the HasPrefix predicate on the "currency_code" field.
func CurrencyCodeHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldCurrencyCode, v))
}

// CurrencyCodeHasSuffix applies the HasSuffix predicate on the "currency_code" field.
func CurrencyCodeHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldCurrencyCode, v))
}

// CurrencyCodeEqualFold applies the EqualFold predicate on the "currency_code" field.
func CurrencyCodeEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldCurrencyCode, v))
}

// CurrencyCodeContainsFold applies the ContainsFold predicate on the "currency_code" field.
func CurrencyCodeContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldCurrencyCode, v))
}

// CategoryNameEQ applies the EQ predicate on the "category_name" field.
func CategoryNameEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameNEQ applies the NEQ predicate on the "category_name" field.
func CategoryNameNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldCategoryName, v))
}

// CategoryNameIn applies the In predicate on the "category_name" field.
func CategoryNameIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldCategoryName, vs...))
}

// CategoryNameNotIn applies the NotIn predicate on the "category_name" field.
func CategoryNameNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldCategoryName, vs...))
}

// CategoryNameGT applies the GT predicate on the "category_name" field.
func CategoryNameGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldCategoryName, v))
}

// CategoryNameGTE applies the GTE predicate on the "category_name" field.
func CategoryNameGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldCategoryName, v))
}

// CategoryNameLT applies the LT predicate on the "category_name" field.
func CategoryNameLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldCategoryName, v))
}

// CategoryNameLTE applies the LTE predicate on the "category_name" field.
func CategoryNameLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldCategoryName, v))
}

// CategoryNameContains applies the Contains predicate on the "category_name" field.
func CategoryNameContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldCategoryName, v))
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "category_name" field.
func CategoryNameHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldCategoryName, v))
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "category_name" field.
func CategoryNameHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldCategoryName, v))
}

// CategoryNameEqualFold applies the EqualFold predicate on the "category_name" field.
func CategoryNameEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldCategoryName, v))
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "category_name" field.
func CategoryNameContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldCategoryName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldDescription, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathIsNil applies the IsNil predicate on the "file_path" field.
func FilePathIsNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldIsNull(FieldFilePath))
}

// FilePathNotNil applies the NotNil predicate on the "file_path" field.
func FilePathNotNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldNotNull(FieldFilePath))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldFilePath, v))
}

// IsCurrentEQ applies the EQ predicate on the "is_current" field.
func IsCurrentEQ(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldIsCurrent, v))
}

// IsCurrentNEQ applies the NEQ predicate on the "is_current" field.
func IsCurrentNEQ(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldIsCurrent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.ReceiptFile) predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.ExtractJob) predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.NotPredicates(p))
}
