// Code generated by ent, DO NOT EDIT.

package receipt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the receipt type in the database.
	Label = "receipt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldMerchantName holds the string denoting the merchant_name field in the database.
	FieldMerchantName = "merchant_name"
	// FieldTxDate holds the string denoting the tx_date field in the database.
	FieldTxDate = "tx_date"
	// FieldSubtotal holds the string denoting the subtotal field in the database.
	FieldSubtotal = "subtotal"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldCategoryName holds the string denoting the category_name field in the database.
	FieldCategoryName = "category_name"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldPaymentLast4 holds the string denoting the payment_last4 field in the database.
	FieldPaymentLast4 = "payment_last4"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the receipt in the database.
	Table = "receipts"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "receipts"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
	// FilesTable is the table that holds the files relation/edge.
	FilesTable = "receipt_files"
	// FilesInverseTable is the table name for the ReceiptFile entity.
	// It exists in this package in order to avoid circular dependency with the "receiptfile" package.
	FilesInverseTable = "receipt_files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "receipt_files"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "extract_job"
	// JobsInverseTable is the table name for the ExtractJob entity.
	// It exists in this package in order to avoid circular dependency with the "extractjob" package.
	JobsInverseTable = "extract_job"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "receipt_id"
)

// Columns holds all SQL columns for receipt fields.
var Columns = []string{
	FieldID,
	FieldProfileID,
	FieldMerchantName,
	FieldTxDate,
	FieldSubtotal,
	FieldTax,
	FieldTotal,
	FieldCurrencyCode,
	FieldCategoryName,
	FieldPaymentMethod,
	FieldPaymentLast4,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MerchantNameValidator is a validator for the "merchant_name" field. It is called by the builders before save.
	MerchantNameValidator func(string) error
	// CurrencyCodeValidator is a validator for the "currency_code" field. It is called by the builders before save.
	CurrencyCodeValidator func(string) error
	// CategoryNameValidator is a validator for the "category_name" field. It is called by the builders before save.
	CategoryNameValidator func(string) error
	// PaymentLast4Validator is a validator for the "payment_last4" field. It is called by the builders before save.
	PaymentLast4Validator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Receipt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByMerchantName orders the results by the merchant_name field.
func ByMerchantName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantName, opts...).ToFunc()
}

// ByTxDate orders the results by the tx_date field.
func ByTxDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxDate, opts...).ToFunc()
}

// BySubtotal orders the results by the subtotal field.
func BySubtotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtotal, opts...).ToFunc()
}

// ByTax orders the results by the tax field.
func ByTax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTax, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByCategoryName orders the results by the category_name field.
func ByCategoryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryName, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByPaymentLast4 orders the results by the payment_last4 field.
func ByPaymentLast4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentLast4, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
