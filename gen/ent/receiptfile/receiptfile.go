// Code generated by ent, DO NOT EDIT.

package receiptfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the receiptfile type in the database.
	Label = "receipt_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldReceiptID holds the string denoting the receipt_id field in the database.
	FieldReceiptID = "receipt_id"
	// FieldSourcePath holds the string denoting the source_path field in the database.
	FieldSourcePath = "source_path"
	// FieldContentHash holds the string denoting the content_hash field in the database.
	FieldContentHash = "content_hash"
	// FieldFileExt holds the string denoting the file_ext field in the database.
	FieldFileExt = "file_ext"
	// FieldUploadedAt holds the string denoting the uploaded_at field in the database.
	FieldUploadedAt = "uploaded_at"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeReceipt holds the string denoting the receipt edge name in mutations.
	EdgeReceipt = "receipt"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the receiptfile in the database.
	Table = "receipt_files"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "receipt_files"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
	// ReceiptTable is the table that holds the receipt relation/edge.
	ReceiptTable = "receipt_files"
	// ReceiptInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptInverseTable = "receipts"
	// ReceiptColumn is the table column denoting the receipt relation/edge.
	ReceiptColumn = "receipt_id"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "extract_job"
	// JobsInverseTable is the table name for the ExtractJob entity.
	// It exists in this package in order to avoid circular dependency with the "extractjob" package.
	JobsInverseTable = "extract_job"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "file_id"
)

// Columns holds all SQL columns for receiptfile fields.
var Columns = []string{
	FieldID,
	FieldProfileID,
	FieldReceiptID,
	FieldSourcePath,
	FieldContentHash,
	FieldFileExt,
	FieldUploadedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SourcePathValidator is a validator for the "source_path" field. It is called by the builders before save.
	SourcePathValidator func(string) error
	// ContentHashValidator is a validator for the "content_hash" field. It is called by the builders before save.
	ContentHashValidator func([]byte) error
	// FileExtValidator is a validator for the "file_ext" field. It is called by the builders before save.
	FileExtValidator func(string) error
	// DefaultUploadedAt holds the default value on creation for the "uploaded_at" field.
	DefaultUploadedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ReceiptFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByReceiptID orders the results by the receipt_id field.
func ByReceiptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiptID, opts...).ToFunc()
}

// BySourcePath orders the results by the source_path field.
func BySourcePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourcePath, opts...).ToFunc()
}

// ByFileExt orders the results by the file_ext field.
func ByFileExt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExt, opts...).ToFunc()
}

// ByUploadedAt orders the results by the uploaded_at field.
func ByUploadedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedAt, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiptField orders the results by receipt field.
func ByReceiptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newReceiptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReceiptTable, ReceiptColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
