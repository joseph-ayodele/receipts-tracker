// Code generated by ent, DO NOT EDIT.

package receiptfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldID, id))
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldProfileID, v))
}

// SourcePath applies equality check predicate on the "source_path" field. It's identical to SourcePathEQ.
func SourcePath(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldSourcePath, v))
}

// ContentHash applies equality check predicate on the "content_hash" field. It's identical to ContentHashEQ.
func ContentHash(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldContentHash, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFilename, v))
}

// FileExt applies equality check predicate on the "file_ext" field. It's identical to FileExtEQ.
func FileExt(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFileExt, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFileSize, v))
}

// UploadedAt applies equality check predicate on the "uploaded_at" field. It's identical to UploadedAtEQ.
func UploadedAt(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldUploadedAt, v))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...uuid.UUID) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldProfileID, vs...))
}

// SourcePathEQ applies the EQ predicate on the "source_path" field.
func SourcePathEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldSourcePath, v))
}

// SourcePathNEQ applies the NEQ predicate on the "source_path" field.
func SourcePathNEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldSourcePath, v))
}

// SourcePathIn applies the In predicate on the "source_path" field.
func SourcePathIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldSourcePath, vs...))
}

// SourcePathNotIn applies the NotIn predicate on the "source_path" field.
func SourcePathNotIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldSourcePath, vs...))
}

// SourcePathGT applies the GT predicate on the "source_path" field.
func SourcePathGT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldSourcePath, v))
}

// SourcePathGTE applies the GTE predicate on the "source_path" field.
func SourcePathGTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldSourcePath, v))
}

// SourcePathLT applies the LT predicate on the "source_path" field.
func SourcePathLT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldSourcePath, v))
}

// SourcePathLTE applies the LTE predicate on the "source_path" field.
func SourcePathLTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldSourcePath, v))
}

// SourcePathContains applies the Contains predicate on the "source_path" field.
func SourcePathContains(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContains(FieldSourcePath, v))
}

// SourcePathHasPrefix applies the HasPrefix predicate on the "source_path" field.
func SourcePathHasPrefix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasPrefix(FieldSourcePath, v))
}

// SourcePathHasSuffix applies the HasSuffix predicate on the "source_path" field.
func SourcePathHasSuffix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasSuffix(FieldSourcePath, v))
}

// SourcePathEqualFold applies the EqualFold predicate on the "source_path" field.
func SourcePathEqualFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEqualFold(FieldSourcePath, v))
}

// SourcePathContainsFold applies the ContainsFold predicate on the "source_path" field.
func SourcePathContainsFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContainsFold(FieldSourcePath, v))
}

// ContentHashEQ applies the EQ predicate on the "content_hash" field.
func ContentHashEQ(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldContentHash, v))
}

// ContentHashNEQ applies the NEQ predicate on the "content_hash" field.
func ContentHashNEQ(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldContentHash, v))
}

// ContentHashIn applies the In predicate on the "content_hash" field.
func ContentHashIn(vs ...[]byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldContentHash, vs...))
}

// ContentHashNotIn applies the NotIn predicate on the "content_hash" field.
func ContentHashNotIn(vs ...[]byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldContentHash, vs...))
}

// ContentHashGT applies the GT predicate on the "content_hash" field.
func ContentHashGT(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldContentHash, v))
}

// ContentHashGTE applies the GTE predicate on the "content_hash" field.
func ContentHashGTE(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldContentHash, v))
}

// ContentHashLT applies the LT predicate on the "content_hash" field.
func ContentHashLT(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldContentHash, v))
}

// ContentHashLTE applies the LTE predicate on the "content_hash" field.
func ContentHashLTE(v []byte) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldContentHash, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContainsFold(FieldFilename, v))
}

// FileExtEQ applies the EQ predicate on the "file_ext" field.
func FileExtEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFileExt, v))
}

// FileExtNEQ applies the NEQ predicate on the "file_ext" field.
func FileExtNEQ(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldFileExt, v))
}

// FileExtIn applies the In predicate on the "file_ext" field.
func FileExtIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldFileExt, vs...))
}

// FileExtNotIn applies the NotIn predicate on the "file_ext" field.
func FileExtNotIn(vs ...string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldFileExt, vs...))
}

// FileExtGT applies the GT predicate on the "file_ext" field.
func FileExtGT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldFileExt, v))
}

// FileExtGTE applies the GTE predicate on the "file_ext" field.
func FileExtGTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldFileExt, v))
}

// FileExtLT applies the LT predicate on the "file_ext" field.
func FileExtLT(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldFileExt, v))
}

// FileExtLTE applies the LTE predicate on the "file_ext" field.
func FileExtLTE(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldFileExt, v))
}

// FileExtContains applies the Contains predicate on the "file_ext" field.
func FileExtContains(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContains(FieldFileExt, v))
}

// FileExtHasPrefix applies the HasPrefix predicate on the "file_ext" field.
func FileExtHasPrefix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasPrefix(FieldFileExt, v))
}

// FileExtHasSuffix applies the HasSuffix predicate on the "file_ext" field.
func FileExtHasSuffix(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldHasSuffix(FieldFileExt, v))
}

// FileExtEqualFold applies the EqualFold predicate on the "file_ext" field.
func FileExtEqualFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEqualFold(FieldFileExt, v))
}

// FileExtContainsFold applies the ContainsFold predicate on the "file_ext" field.
func FileExtContainsFold(v string) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldContainsFold(FieldFileExt, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldFileSize, v))
}

// UploadedAtEQ applies the EQ predicate on the "uploaded_at" field.
func UploadedAtEQ(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldEQ(FieldUploadedAt, v))
}

// UploadedAtNEQ applies the NEQ predicate on the "uploaded_at" field.
func UploadedAtNEQ(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNEQ(FieldUploadedAt, v))
}

// UploadedAtIn applies the In predicate on the "uploaded_at" field.
func UploadedAtIn(vs ...time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldIn(FieldUploadedAt, vs...))
}

// UploadedAtNotIn applies the NotIn predicate on the "uploaded_at" field.
func UploadedAtNotIn(vs ...time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldNotIn(FieldUploadedAt, vs...))
}

// UploadedAtGT applies the GT predicate on the "uploaded_at" field.
func UploadedAtGT(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGT(FieldUploadedAt, v))
}

// UploadedAtGTE applies the GTE predicate on the "uploaded_at" field.
func UploadedAtGTE(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldGTE(FieldUploadedAt, v))
}

// UploadedAtLT applies the LT predicate on the "uploaded_at" field.
func UploadedAtLT(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLT(FieldUploadedAt, v))
}

// UploadedAtLTE applies the LTE predicate on the "uploaded_at" field.
func UploadedAtLTE(v time.Time) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.FieldLTE(FieldUploadedAt, v))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.ReceiptFile {
	return predicate.ReceiptFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.ReceiptFile {
	return predicate.ReceiptFile(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.ReceiptFile {
	return predicate.ReceiptFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.ExtractJob) predicate.ReceiptFile {
	return predicate.ReceiptFile(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReceiptFile) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReceiptFile) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReceiptFile) predicate.ReceiptFile {
	return predicate.ReceiptFile(sql.NotPredicates(p))
}
