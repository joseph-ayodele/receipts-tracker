// Code generated by ent, DO NOT EDIT.

package category

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategoryType holds the string denoting the category_type field in the database.
	FieldCategoryType = "category_type"
	// EdgeReceipts holds the string denoting the receipts edge name in mutations.
	EdgeReceipts = "receipts"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// ReceiptsTable is the table that holds the receipts relation/edge.
	ReceiptsTable = "receipts"
	// ReceiptsInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptsInverseTable = "receipts"
	// ReceiptsColumn is the table column denoting the receipts relation/edge.
	ReceiptsColumn = "category_id"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCategoryType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// CategoryType defines the type for the "category_type" enum field.
type CategoryType string

// CategoryTypeDIRECT is the default value of the CategoryType enum.
const DefaultCategoryType = CategoryTypeDIRECT

// CategoryType values.
const (
	CategoryTypeDIRECT   CategoryType = "DIRECT"
	CategoryTypeINDIRECT CategoryType = "INDIRECT"
)

func (ct CategoryType) String() string {
	return string(ct)
}

// CategoryTypeValidator is a validator for the "category_type" field enum values. It is called by the builders before save.
func CategoryTypeValidator(ct CategoryType) error {
	switch ct {
	case CategoryTypeDIRECT, CategoryTypeINDIRECT:
		return nil
	default:
		return fmt.Errorf("category: invalid enum value for category_type field: %q", ct)
	}
}

// OrderOption defines the ordering options for the Category queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCategoryType orders the results by the category_type field.
func ByCategoryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryType, opts...).ToFunc()
}

// ByReceiptsCount orders the results by receipts count.
func ByReceiptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiptsStep(), opts...)
	}
}

// ByReceipts orders the results by receipts terms.
func ByReceipts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReceiptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceiptsTable, ReceiptsColumn),
	)
}
