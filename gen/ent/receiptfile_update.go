// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/predicate"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ReceiptFileUpdate is the builder for updating ReceiptFile entities.
type ReceiptFileUpdate struct {
	config
	hooks    []Hook
	mutation *ReceiptFileMutation
}

// Where appends a list predicates to the ReceiptFileUpdate builder.
func (_u *ReceiptFileUpdate) Where(ps ...predicate.ReceiptFile) *ReceiptFileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetProfileID sets the "profile_id" field.
func (_u *ReceiptFileUpdate) SetProfileID(v uuid.UUID) *ReceiptFileUpdate {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ReceiptFileUpdate) SetNillableProfileID(v *uuid.UUID) *ReceiptFileUpdate {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetReceiptID sets the "receipt_id" field.
func (_u *ReceiptFileUpdate) SetReceiptID(v uuid.UUID) *ReceiptFileUpdate {
	_u.mutation.SetReceiptID(v)
	return _u
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_u *ReceiptFileUpdate) SetNillableReceiptID(v *uuid.UUID) *ReceiptFileUpdate {
	if v != nil {
		_u.SetReceiptID(*v)
	}
	return _u
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (_u *ReceiptFileUpdate) ClearReceiptID() *ReceiptFileUpdate {
	_u.mutation.ClearReceiptID()
	return _u
}

// SetSourcePath sets the "source_path" field.
func (_u *ReceiptFileUpdate) SetSourcePath(v string) *ReceiptFileUpdate {
	_u.mutation.SetSourcePath(v)
	return _u
}

// SetNillableSourcePath sets the "source_path" field if the given value is not nil.
func (_u *ReceiptFileUpdate) SetNillableSourcePath(v *string) *ReceiptFileUpdate {
	if v != nil {
		_u.SetSourcePath(*v)
	}
	return _u
}

// SetContentHash sets the "content_hash" field.
func (_u *ReceiptFileUpdate) SetContentHash(v []byte) *ReceiptFileUpdate {
	_u.mutation.SetContentHash(v)
	return _u
}

// SetFileExt sets the "file_ext" field.
func (_u *ReceiptFileUpdate) SetFileExt(v string) *ReceiptFileUpdate {
	_u.mutation.SetFileExt(v)
	return _u
}

// SetNillableFileExt sets the "file_ext" field if the given value is not nil.
func (_u *ReceiptFileUpdate) SetNillableFileExt(v *string) *ReceiptFileUpdate {
	if v != nil {
		_u.SetFileExt(*v)
	}
	return _u
}

// SetUploadedAt sets the "uploaded_at" field.
func (_u *ReceiptFileUpdate) SetUploadedAt(v time.Time) *ReceiptFileUpdate {
	_u.mutation.SetUploadedAt(v)
	return _u
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (_u *ReceiptFileUpdate) SetNillableUploadedAt(v *time.Time) *ReceiptFileUpdate {
	if v != nil {
		_u.SetUploadedAt(*v)
	}
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ReceiptFileUpdate) SetProfile(v *Profile) *ReceiptFileUpdate {
	return _u.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_u *ReceiptFileUpdate) SetReceipt(v *Receipt) *ReceiptFileUpdate {
	return _u.SetReceiptID(v.ID)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_u *ReceiptFileUpdate) AddJobIDs(ids ...uuid.UUID) *ReceiptFileUpdate {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_u *ReceiptFileUpdate) AddJobs(v ...*ExtractJob) *ReceiptFileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the ReceiptFileMutation object of the builder.
func (_u *ReceiptFileUpdate) Mutation() *ReceiptFileMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ReceiptFileUpdate) ClearProfile() *ReceiptFileUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearReceipt clears the "receipt" edge to the Receipt entity.
func (_u *ReceiptFileUpdate) ClearReceipt() *ReceiptFileUpdate {
	_u.mutation.ClearReceipt()
	return _u
}

// ClearJobs clears all "jobs" edges to the ExtractJob entity.
func (_u *ReceiptFileUpdate) ClearJobs() *ReceiptFileUpdate {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to ExtractJob entities by IDs.
func (_u *ReceiptFileUpdate) RemoveJobIDs(ids ...uuid.UUID) *ReceiptFileUpdate {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to ExtractJob entities.
func (_u *ReceiptFileUpdate) RemoveJobs(v ...*ExtractJob) *ReceiptFileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ReceiptFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReceiptFileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ReceiptFileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReceiptFileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReceiptFileUpdate) check() error {
	if v, ok := _u.mutation.SourcePath(); ok {
		if err := receiptfile.SourcePathValidator(v); err != nil {
			return &ValidationError{Name: "source_path", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.source_path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ContentHash(); ok {
		if err := receiptfile.ContentHashValidator(v); err != nil {
			return &ValidationError{Name: "content_hash", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.content_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FileExt(); ok {
		if err := receiptfile.FileExtValidator(v); err != nil {
			return &ValidationError{Name: "file_ext", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.file_ext": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReceiptFile.profile"`)
	}
	return nil
}

func (_u *ReceiptFileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receiptfile.Table, receiptfile.Columns, sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SourcePath(); ok {
		_spec.SetField(receiptfile.FieldSourcePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContentHash(); ok {
		_spec.SetField(receiptfile.FieldContentHash, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileExt(); ok {
		_spec.SetField(receiptfile.FieldFileExt, field.TypeString, value)
	}
	if value, ok := _u.mutation.UploadedAt(); ok {
		_spec.SetField(receiptfile.FieldUploadedAt, field.TypeTime, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ProfileTable,
			Columns: []string{receiptfile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ProfileTable,
			Columns: []string{receiptfile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ReceiptTable,
			Columns: []string{receiptfile.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ReceiptTable,
			Columns: []string{receiptfile.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receiptfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ReceiptFileUpdateOne is the builder for updating a single ReceiptFile entity.
type ReceiptFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceiptFileMutation
}

// SetProfileID sets the "profile_id" field.
func (_u *ReceiptFileUpdateOne) SetProfileID(v uuid.UUID) *ReceiptFileUpdateOne {
	_u.mutation.SetProfileID(v)
	return _u
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (_u *ReceiptFileUpdateOne) SetNillableProfileID(v *uuid.UUID) *ReceiptFileUpdateOne {
	if v != nil {
		_u.SetProfileID(*v)
	}
	return _u
}

// SetReceiptID sets the "receipt_id" field.
func (_u *ReceiptFileUpdateOne) SetReceiptID(v uuid.UUID) *ReceiptFileUpdateOne {
	_u.mutation.SetReceiptID(v)
	return _u
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_u *ReceiptFileUpdateOne) SetNillableReceiptID(v *uuid.UUID) *ReceiptFileUpdateOne {
	if v != nil {
		_u.SetReceiptID(*v)
	}
	return _u
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (_u *ReceiptFileUpdateOne) ClearReceiptID() *ReceiptFileUpdateOne {
	_u.mutation.ClearReceiptID()
	return _u
}

// SetSourcePath sets the "source_path" field.
func (_u *ReceiptFileUpdateOne) SetSourcePath(v string) *ReceiptFileUpdateOne {
	_u.mutation.SetSourcePath(v)
	return _u
}

// SetNillableSourcePath sets the "source_path" field if the given value is not nil.
func (_u *ReceiptFileUpdateOne) SetNillableSourcePath(v *string) *ReceiptFileUpdateOne {
	if v != nil {
		_u.SetSourcePath(*v)
	}
	return _u
}

// SetContentHash sets the "content_hash" field.
func (_u *ReceiptFileUpdateOne) SetContentHash(v []byte) *ReceiptFileUpdateOne {
	_u.mutation.SetContentHash(v)
	return _u
}

// SetFileExt sets the "file_ext" field.
func (_u *ReceiptFileUpdateOne) SetFileExt(v string) *ReceiptFileUpdateOne {
	_u.mutation.SetFileExt(v)
	return _u
}

// SetNillableFileExt sets the "file_ext" field if the given value is not nil.
func (_u *ReceiptFileUpdateOne) SetNillableFileExt(v *string) *ReceiptFileUpdateOne {
	if v != nil {
		_u.SetFileExt(*v)
	}
	return _u
}

// SetUploadedAt sets the "uploaded_at" field.
func (_u *ReceiptFileUpdateOne) SetUploadedAt(v time.Time) *ReceiptFileUpdateOne {
	_u.mutation.SetUploadedAt(v)
	return _u
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (_u *ReceiptFileUpdateOne) SetNillableUploadedAt(v *time.Time) *ReceiptFileUpdateOne {
	if v != nil {
		_u.SetUploadedAt(*v)
	}
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *ReceiptFileUpdateOne) SetProfile(v *Profile) *ReceiptFileUpdateOne {
	return _u.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_u *ReceiptFileUpdateOne) SetReceipt(v *Receipt) *ReceiptFileUpdateOne {
	return _u.SetReceiptID(v.ID)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_u *ReceiptFileUpdateOne) AddJobIDs(ids ...uuid.UUID) *ReceiptFileUpdateOne {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_u *ReceiptFileUpdateOne) AddJobs(v ...*ExtractJob) *ReceiptFileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the ReceiptFileMutation object of the builder.
func (_u *ReceiptFileUpdateOne) Mutation() *ReceiptFileMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *ReceiptFileUpdateOne) ClearProfile() *ReceiptFileUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearReceipt clears the "receipt" edge to the Receipt entity.
func (_u *ReceiptFileUpdateOne) ClearReceipt() *ReceiptFileUpdateOne {
	_u.mutation.ClearReceipt()
	return _u
}

// ClearJobs clears all "jobs" edges to the ExtractJob entity.
func (_u *ReceiptFileUpdateOne) ClearJobs() *ReceiptFileUpdateOne {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to ExtractJob entities by IDs.
func (_u *ReceiptFileUpdateOne) RemoveJobIDs(ids ...uuid.UUID) *ReceiptFileUpdateOne {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to ExtractJob entities.
func (_u *ReceiptFileUpdateOne) RemoveJobs(v ...*ExtractJob) *ReceiptFileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Where appends a list predicates to the ReceiptFileUpdate builder.
func (_u *ReceiptFileUpdateOne) Where(ps ...predicate.ReceiptFile) *ReceiptFileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ReceiptFileUpdateOne) Select(field string, fields ...string) *ReceiptFileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ReceiptFile entity.
func (_u *ReceiptFileUpdateOne) Save(ctx context.Context) (*ReceiptFile, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReceiptFileUpdateOne) SaveX(ctx context.Context) *ReceiptFile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ReceiptFileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReceiptFileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReceiptFileUpdateOne) check() error {
	if v, ok := _u.mutation.SourcePath(); ok {
		if err := receiptfile.SourcePathValidator(v); err != nil {
			return &ValidationError{Name: "source_path", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.source_path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ContentHash(); ok {
		if err := receiptfile.ContentHashValidator(v); err != nil {
			return &ValidationError{Name: "content_hash", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.content_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FileExt(); ok {
		if err := receiptfile.FileExtValidator(v); err != nil {
			return &ValidationError{Name: "file_ext", err: fmt.Errorf(`ent: validator failed for field "ReceiptFile.file_ext": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReceiptFile.profile"`)
	}
	return nil
}

func (_u *ReceiptFileUpdateOne) sqlSave(ctx context.Context) (_node *ReceiptFile, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receiptfile.Table, receiptfile.Columns, sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReceiptFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, receiptfile.FieldID)
		for _, f := range fields {
			if !receiptfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != receiptfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SourcePath(); ok {
		_spec.SetField(receiptfile.FieldSourcePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContentHash(); ok {
		_spec.SetField(receiptfile.FieldContentHash, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileExt(); ok {
		_spec.SetField(receiptfile.FieldFileExt, field.TypeString, value)
	}
	if value, ok := _u.mutation.UploadedAt(); ok {
		_spec.SetField(receiptfile.FieldUploadedAt, field.TypeTime, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ProfileTable,
			Columns: []string{receiptfile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ProfileTable,
			Columns: []string{receiptfile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ReceiptTable,
			Columns: []string{receiptfile.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiptfile.ReceiptTable,
			Columns: []string{receiptfile.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receiptfile.JobsTable,
			Columns: []string{receiptfile.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReceiptFile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receiptfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
