// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ExtractJobCreate is the builder for creating a ExtractJob entity.
type ExtractJobCreate struct {
	config
	mutation *ExtractJobMutation
	hooks    []Hook
}

// SetFileID sets the "file_id" field.
func (_c *ExtractJobCreate) SetFileID(v uuid.UUID) *ExtractJobCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetProfileID sets the "profile_id" field.
func (_c *ExtractJobCreate) SetProfileID(v uuid.UUID) *ExtractJobCreate {
	_c.mutation.SetProfileID(v)
	return _c
}

// SetReceiptID sets the "receipt_id" field.
func (_c *ExtractJobCreate) SetReceiptID(v uuid.UUID) *ExtractJobCreate {
	_c.mutation.SetReceiptID(v)
	return _c
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableReceiptID(v *uuid.UUID) *ExtractJobCreate {
	if v != nil {
		_c.SetReceiptID(*v)
	}
	return _c
}

// SetFormat sets the "format" field.
func (_c *ExtractJobCreate) SetFormat(v string) *ExtractJobCreate {
	_c.mutation.SetFormat(v)
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *ExtractJobCreate) SetStartedAt(v time.Time) *ExtractJobCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableStartedAt(v *time.Time) *ExtractJobCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetFinishedAt sets the "finished_at" field.
func (_c *ExtractJobCreate) SetFinishedAt(v time.Time) *ExtractJobCreate {
	_c.mutation.SetFinishedAt(v)
	return _c
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableFinishedAt(v *time.Time) *ExtractJobCreate {
	if v != nil {
		_c.SetFinishedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ExtractJobCreate) SetStatus(v string) *ExtractJobCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableStatus(v *string) *ExtractJobCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *ExtractJobCreate) SetErrorMessage(v string) *ExtractJobCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableErrorMessage(v *string) *ExtractJobCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetExtractionConfidence sets the "extraction_confidence" field.
func (_c *ExtractJobCreate) SetExtractionConfidence(v float32) *ExtractJobCreate {
	_c.mutation.SetExtractionConfidence(v)
	return _c
}

// SetNillableExtractionConfidence sets the "extraction_confidence" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableExtractionConfidence(v *float32) *ExtractJobCreate {
	if v != nil {
		_c.SetExtractionConfidence(*v)
	}
	return _c
}

// SetNeedsReview sets the "needs_review" field.
func (_c *ExtractJobCreate) SetNeedsReview(v bool) *ExtractJobCreate {
	_c.mutation.SetNeedsReview(v)
	return _c
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableNeedsReview(v *bool) *ExtractJobCreate {
	if v != nil {
		_c.SetNeedsReview(*v)
	}
	return _c
}

// SetOcrText sets the "ocr_text" field.
func (_c *ExtractJobCreate) SetOcrText(v string) *ExtractJobCreate {
	_c.mutation.SetOcrText(v)
	return _c
}

// SetNillableOcrText sets the "ocr_text" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableOcrText(v *string) *ExtractJobCreate {
	if v != nil {
		_c.SetOcrText(*v)
	}
	return _c
}

// SetExtractedJSON sets the "extracted_json" field.
func (_c *ExtractJobCreate) SetExtractedJSON(v json.RawMessage) *ExtractJobCreate {
	_c.mutation.SetExtractedJSON(v)
	return _c
}

// SetModelName sets the "model_name" field.
func (_c *ExtractJobCreate) SetModelName(v string) *ExtractJobCreate {
	_c.mutation.SetModelName(v)
	return _c
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableModelName(v *string) *ExtractJobCreate {
	if v != nil {
		_c.SetModelName(*v)
	}
	return _c
}

// SetModelParams sets the "model_params" field.
func (_c *ExtractJobCreate) SetModelParams(v json.RawMessage) *ExtractJobCreate {
	_c.mutation.SetModelParams(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ExtractJobCreate) SetID(v uuid.UUID) *ExtractJobCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ExtractJobCreate) SetNillableID(v *uuid.UUID) *ExtractJobCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetFile sets the "file" edge to the ReceiptFile entity.
func (_c *ExtractJobCreate) SetFile(v *ReceiptFile) *ExtractJobCreate {
	return _c.SetFileID(v.ID)
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_c *ExtractJobCreate) SetProfile(v *Profile) *ExtractJobCreate {
	return _c.SetProfileID(v.ID)
}

// SetReceipt sets the "receipt" edge to the Receipt entity.
func (_c *ExtractJobCreate) SetReceipt(v *Receipt) *ExtractJobCreate {
	return _c.SetReceiptID(v.ID)
}

// Mutation returns the ExtractJobMutation object of the builder.
func (_c *ExtractJobCreate) Mutation() *ExtractJobMutation {
	return _c.mutation
}

// Save creates the ExtractJob in the database.
func (_c *ExtractJobCreate) Save(ctx context.Context) (*ExtractJob, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ExtractJobCreate) SaveX(ctx context.Context) *ExtractJob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExtractJobCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExtractJobCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ExtractJobCreate) defaults() {
	if _, ok := _c.mutation.StartedAt(); !ok {
		v := extractjob.DefaultStartedAt()
		_c.mutation.SetStartedAt(v)
	}
	if _, ok := _c.mutation.NeedsReview(); !ok {
		v := extractjob.DefaultNeedsReview
		_c.mutation.SetNeedsReview(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := extractjob.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ExtractJobCreate) check() error {
	if _, ok := _c.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "ExtractJob.file_id"`)}
	}
	if _, ok := _c.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "ExtractJob.profile_id"`)}
	}
	if _, ok := _c.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "ExtractJob.format"`)}
	}
	if v, ok := _c.mutation.Format(); ok {
		if err := extractjob.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ExtractJob.format": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "ExtractJob.started_at"`)}
	}
	if _, ok := _c.mutation.NeedsReview(); !ok {
		return &ValidationError{Name: "needs_review", err: errors.New(`ent: missing required field "ExtractJob.needs_review"`)}
	}
	if len(_c.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "ExtractJob.file"`)}
	}
	if len(_c.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "ExtractJob.profile"`)}
	}
	return nil
}

func (_c *ExtractJobCreate) sqlSave(ctx context.Context) (*ExtractJob, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ExtractJobCreate) createSpec() (*ExtractJob, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtractJob{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(extractjob.Table, sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Format(); ok {
		_spec.SetField(extractjob.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(extractjob.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.FinishedAt(); ok {
		_spec.SetField(extractjob.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(extractjob.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(extractjob.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := _c.mutation.ExtractionConfidence(); ok {
		_spec.SetField(extractjob.FieldExtractionConfidence, field.TypeFloat32, value)
		_node.ExtractionConfidence = &value
	}
	if value, ok := _c.mutation.NeedsReview(); ok {
		_spec.SetField(extractjob.FieldNeedsReview, field.TypeBool, value)
		_node.NeedsReview = value
	}
	if value, ok := _c.mutation.OcrText(); ok {
		_spec.SetField(extractjob.FieldOcrText, field.TypeString, value)
		_node.OcrText = &value
	}
	if value, ok := _c.mutation.ExtractedJSON(); ok {
		_spec.SetField(extractjob.FieldExtractedJSON, field.TypeJSON, value)
		_node.ExtractedJSON = value
	}
	if value, ok := _c.mutation.ModelName(); ok {
		_spec.SetField(extractjob.FieldModelName, field.TypeString, value)
		_node.ModelName = &value
	}
	if value, ok := _c.mutation.ModelParams(); ok {
		_spec.SetField(extractjob.FieldModelParams, field.TypeJSON, value)
		_node.ModelParams = value
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.FileTable,
			Columns: []string{extractjob.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ProfileTable,
			Columns: []string{extractjob.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extractjob.ReceiptTable,
			Columns: []string{extractjob.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiptID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExtractJobCreateBulk is the builder for creating many ExtractJob entities in bulk.
type ExtractJobCreateBulk struct {
	config
	err      error
	builders []*ExtractJobCreate
}

// Save creates the ExtractJob entities in the database.
func (_c *ExtractJobCreateBulk) Save(ctx context.Context) ([]*ExtractJob, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ExtractJob, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtractJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ExtractJobCreateBulk) SaveX(ctx context.Context) []*ExtractJob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExtractJobCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExtractJobCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
