// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// JobTitle holds the value of the "job_title" field.
	JobTitle *string `json:"job_title,omitempty"`
	// JobDescription holds the value of the "job_description" field.
	JobDescription *string `json:"job_description,omitempty"`
	// DefaultCurrency holds the value of the "default_currency" field.
	DefaultCurrency string `json:"default_currency,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges        ProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Receipts holds the value of the receipts edge.
	Receipts []*Receipt `json:"receipts,omitempty"`
	// Files holds the value of the files edge.
	Files []*ReceiptFile `json:"files,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*ExtractJob `json:"jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReceiptsOrErr returns the Receipts value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) ReceiptsOrErr() ([]*Receipt, error) {
	if e.loadedTypes[0] {
		return e.Receipts, nil
	}
	return nil, &NotLoadedError{edge: "receipts"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) FilesOrErr() ([]*ReceiptFile, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) JobsOrErr() ([]*ExtractJob, error) {
	if e.loadedTypes[2] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldName, profile.FieldJobTitle, profile.FieldJobDescription, profile.FieldDefaultCurrency:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt, profile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case profile.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (_m *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case profile.FieldJobTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_title", values[i])
			} else if value.Valid {
				_m.JobTitle = new(string)
				*_m.JobTitle = value.String
			}
		case profile.FieldJobDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_description", values[i])
			} else if value.Valid {
				_m.JobDescription = new(string)
				*_m.JobDescription = value.String
			}
		case profile.FieldDefaultCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_currency", values[i])
			} else if value.Valid {
				_m.DefaultCurrency = value.String
			}
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case profile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (_m *Profile) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryReceipts queries the "receipts" edge of the Profile entity.
func (_m *Profile) QueryReceipts() *ReceiptQuery {
	return NewProfileClient(_m.config).QueryReceipts(_m)
}

// QueryFiles queries the "files" edge of the Profile entity.
func (_m *Profile) QueryFiles() *ReceiptFileQuery {
	return NewProfileClient(_m.config).QueryFiles(_m)
}

// QueryJobs queries the "jobs" edge of the Profile entity.
func (_m *Profile) QueryJobs() *ExtractJobQuery {
	return NewProfileClient(_m.config).QueryJobs(_m)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Profile) Unwrap() *Profile {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.JobTitle; v != nil {
		builder.WriteString("job_title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.JobDescription; v != nil {
		builder.WriteString("job_description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("default_currency=")
	builder.WriteString(_m.DefaultCurrency)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
