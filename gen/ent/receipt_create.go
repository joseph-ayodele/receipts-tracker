// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/extractjob"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/profile"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receipt"
	"github.com/joseph-ayodele/receipts-tracker/gen/ent/receiptfile"
)

// ReceiptCreate is the builder for creating a Receipt entity.
type ReceiptCreate struct {
	config
	mutation *ReceiptMutation
	hooks    []Hook
}

// SetProfileID sets the "profile_id" field.
func (_c *ReceiptCreate) SetProfileID(v uuid.UUID) *ReceiptCreate {
	_c.mutation.SetProfileID(v)
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *ReceiptCreate) SetFileID(v uuid.UUID) *ReceiptCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableFileID(v *uuid.UUID) *ReceiptCreate {
	if v != nil {
		_c.SetFileID(*v)
	}
	return _c
}

// SetMerchantName sets the "merchant_name" field.
func (_c *ReceiptCreate) SetMerchantName(v string) *ReceiptCreate {
	_c.mutation.SetMerchantName(v)
	return _c
}

// SetTxDate sets the "tx_date" field.
func (_c *ReceiptCreate) SetTxDate(v time.Time) *ReceiptCreate {
	_c.mutation.SetTxDate(v)
	return _c
}

// SetSubtotal sets the "subtotal" field.
func (_c *ReceiptCreate) SetSubtotal(v float64) *ReceiptCreate {
	_c.mutation.SetSubtotal(v)
	return _c
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableSubtotal(v *float64) *ReceiptCreate {
	if v != nil {
		_c.SetSubtotal(*v)
	}
	return _c
}

// SetTax sets the "tax" field.
func (_c *ReceiptCreate) SetTax(v float64) *ReceiptCreate {
	_c.mutation.SetTax(v)
	return _c
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableTax(v *float64) *ReceiptCreate {
	if v != nil {
		_c.SetTax(*v)
	}
	return _c
}

// SetTotal sets the "total" field.
func (_c *ReceiptCreate) SetTotal(v float64) *ReceiptCreate {
	_c.mutation.SetTotal(v)
	return _c
}

// SetCurrencyCode sets the "currency_code" field.
func (_c *ReceiptCreate) SetCurrencyCode(v string) *ReceiptCreate {
	_c.mutation.SetCurrencyCode(v)
	return _c
}

// SetCategoryName sets the "category_name" field.
func (_c *ReceiptCreate) SetCategoryName(v string) *ReceiptCreate {
	_c.mutation.SetCategoryName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ReceiptCreate) SetDescription(v string) *ReceiptCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetFilePath sets the "file_path" field.
func (_c *ReceiptCreate) SetFilePath(v string) *ReceiptCreate {
	_c.mutation.SetFilePath(v)
	return _c
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableFilePath(v *string) *ReceiptCreate {
	if v != nil {
		_c.SetFilePath(*v)
	}
	return _c
}

// SetIsCurrent sets the "is_current" field.
func (_c *ReceiptCreate) SetIsCurrent(v bool) *ReceiptCreate {
	_c.mutation.SetIsCurrent(v)
	return _c
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableIsCurrent(v *bool) *ReceiptCreate {
	if v != nil {
		_c.SetIsCurrent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ReceiptCreate) SetCreatedAt(v time.Time) *ReceiptCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableCreatedAt(v *time.Time) *ReceiptCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ReceiptCreate) SetUpdatedAt(v time.Time) *ReceiptCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableUpdatedAt(v *time.Time) *ReceiptCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ReceiptCreate) SetID(v uuid.UUID) *ReceiptCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ReceiptCreate) SetNillableID(v *uuid.UUID) *ReceiptCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_c *ReceiptCreate) SetProfile(v *Profile) *ReceiptCreate {
	return _c.SetProfileID(v.ID)
}

// AddFileIDs adds the "files" edge to the ReceiptFile entity by IDs.
func (_c *ReceiptCreate) AddFileIDs(ids ...uuid.UUID) *ReceiptCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the ReceiptFile entity.
func (_c *ReceiptCreate) AddFiles(v ...*ReceiptFile) *ReceiptCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the ExtractJob entity by IDs.
func (_c *ReceiptCreate) AddJobIDs(ids ...uuid.UUID) *ReceiptCreate {
	_c.mutation.AddJobIDs(ids...)
	return _c
}

// AddJobs adds the "jobs" edges to the ExtractJob entity.
func (_c *ReceiptCreate) AddJobs(v ...*ExtractJob) *ReceiptCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobIDs(ids...)
}

// Mutation returns the ReceiptMutation object of the builder.
func (_c *ReceiptCreate) Mutation() *ReceiptMutation {
	return _c.mutation
}

// Save creates the Receipt in the database.
func (_c *ReceiptCreate) Save(ctx context.Context) (*Receipt, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ReceiptCreate) SaveX(ctx context.Context) *Receipt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReceiptCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReceiptCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ReceiptCreate) defaults() {
	if _, ok := _c.mutation.IsCurrent(); !ok {
		v := receipt.DefaultIsCurrent
		_c.mutation.SetIsCurrent(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := receipt.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := receipt.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := receipt.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ReceiptCreate) check() error {
	if _, ok := _c.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "Receipt.profile_id"`)}
	}
	if _, ok := _c.mutation.MerchantName(); !ok {
		return &ValidationError{Name: "merchant_name", err: errors.New(`ent: missing required field "Receipt.merchant_name"`)}
	}
	if v, ok := _c.mutation.MerchantName(); ok {
		if err := receipt.MerchantNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_name", err: fmt.Errorf(`ent: validator failed for field "Receipt.merchant_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TxDate(); !ok {
		return &ValidationError{Name: "tx_date", err: errors.New(`ent: missing required field "Receipt.tx_date"`)}
	}
	if _, ok := _c.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Receipt.total"`)}
	}
	if _, ok := _c.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "Receipt.currency_code"`)}
	}
	if v, ok := _c.mutation.CurrencyCode(); ok {
		if err := receipt.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Receipt.currency_code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CategoryName(); !ok {
		return &ValidationError{Name: "category_name", err: errors.New(`ent: missing required field "Receipt.category_name"`)}
	}
	if v, ok := _c.mutation.CategoryName(); ok {
		if err := receipt.CategoryNameValidator(v); err != nil {
			return &ValidationError{Name: "category_name", err: fmt.Errorf(`ent: validator failed for field "Receipt.category_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Receipt.description"`)}
	}
	if _, ok := _c.mutation.IsCurrent(); !ok {
		return &ValidationError{Name: "is_current", err: errors.New(`ent: missing required field "Receipt.is_current"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Receipt.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Receipt.updated_at"`)}
	}
	if len(_c.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "Receipt.profile"`)}
	}
	return nil
}

func (_c *ReceiptCreate) sqlSave(ctx context.Context) (*Receipt, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ReceiptCreate) createSpec() (*Receipt, *sqlgraph.CreateSpec) {
	var (
		_node = &Receipt{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(receipt.Table, sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.FileID(); ok {
		_spec.SetField(receipt.FieldFileID, field.TypeUUID, value)
		_node.FileID = &value
	}
	if value, ok := _c.mutation.MerchantName(); ok {
		_spec.SetField(receipt.FieldMerchantName, field.TypeString, value)
		_node.MerchantName = value
	}
	if value, ok := _c.mutation.TxDate(); ok {
		_spec.SetField(receipt.FieldTxDate, field.TypeTime, value)
		_node.TxDate = value
	}
	if value, ok := _c.mutation.Subtotal(); ok {
		_spec.SetField(receipt.FieldSubtotal, field.TypeFloat64, value)
		_node.Subtotal = &value
	}
	if value, ok := _c.mutation.Tax(); ok {
		_spec.SetField(receipt.FieldTax, field.TypeFloat64, value)
		_node.Tax = &value
	}
	if value, ok := _c.mutation.Total(); ok {
		_spec.SetField(receipt.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if value, ok := _c.mutation.CurrencyCode(); ok {
		_spec.SetField(receipt.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = value
	}
	if value, ok := _c.mutation.CategoryName(); ok {
		_spec.SetField(receipt.FieldCategoryName, field.TypeString, value)
		_node.CategoryName = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(receipt.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.FilePath(); ok {
		_spec.SetField(receipt.FieldFilePath, field.TypeString, value)
		_node.FilePath = &value
	}
	if value, ok := _c.mutation.IsCurrent(); ok {
		_spec.SetField(receipt.FieldIsCurrent, field.TypeBool, value)
		_node.IsCurrent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(receipt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(receipt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receipt.ProfileTable,
			Columns: []string{receipt.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.FilesTable,
			Columns: []string{receipt.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiptfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   receipt.JobsTable,
			Columns: []string{receipt.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extractjob.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReceiptCreateBulk is the builder for creating many Receipt entities in bulk.
type ReceiptCreateBulk struct {
	config
	err      error
	builders []*ReceiptCreate
}

// Save creates the Receipt entities in the database.
func (_c *ReceiptCreateBulk) Save(ctx context.Context) ([]*Receipt, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Receipt, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReceiptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ReceiptCreateBulk) SaveX(ctx context.Context) []*Receipt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReceiptCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReceiptCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
